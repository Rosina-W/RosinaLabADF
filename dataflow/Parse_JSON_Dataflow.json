{
	"name": "Parse_JSON_Dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "RosinaADLS_gen2",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "RosinaADLS_gen2_CSV",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select2"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          eTag as string,",
				"          id as string,",
				"          location as string,",
				"          name as string,",
				"          properties as (columns as (name as string, type as string)[], nextLink as string, rows as string[][]),",
				"          sku as string,",
				"          type as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     fileSystem: 'data',",
				"     fileName: 'Billing JSON output.JSON',",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 select(mapColumn(",
				"          rows = properties.rows",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 foldDown(unroll(rows, rows),",
				"     mapColumn(",
				"          rows",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(PreTaxCost = rows[1],",
				"          UsageDate = rows[2],",
				"          Currency = rows[3]) ~> ModifyColumns1",
				"ModifyColumns1 select(mapColumn(",
				"          PreTaxCost,",
				"          UsageDate,",
				"          Currency",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          bookID as string,",
				"          title as string,",
				"          authors as string,",
				"          average_rating as string,",
				"          isbn as string,",
				"          isbn13 as string,",
				"          language_code as string,",
				"          {  num_pages} as string,",
				"          ratings_count as string,",
				"          text_reviews_count as string,",
				"          publication_date as string,",
				"          publisher as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     format: 'table') ~> sink1"
			]
		}
	}
}