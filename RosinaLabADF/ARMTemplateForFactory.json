{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RosinaLabADF"
		},
		"ADLS_HDInsightclusterStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ADLS_HDInsightclusterStorage'"
		},
		"AzureSQLDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSQLDB'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=rosina-azsql.database.windows.net;Initial Catalog=RosinaSampleDB;User ID=azureuser"
		},
		"AzureSqlMI_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlMI'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=rosina-sqlmi.public.ec0eedb99a74.database.windows.net,3342;Initial Catalog=RosinaSampleDB;User ID=azureuser"
		},
		"AzureSqlMI_mymi_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlMI_mymi'"
		},
		"Blob_RosinaExternalStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Blob_RosinaExternalStorage'"
		},
		"GitHub1_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'GitHub1'"
		},
		"ODBC_Oracle_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ODBC_Oracle'"
		},
		"OnPremSQL_ManagedVNetConnector_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'OnPremSQL_ManagedVNetConnector'"
		},
		"On_PremSQL_RosinaVM_test_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'On_PremSQL_RosinaVM_test'",
			"defaultValue": "Integrated Security=False;Data Source=localhost;Initial Catalog=Data;User ID=azureuser"
		},
		"Rest_rosina112adlsgen2_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'Rest_rosina112adlsgen2'"
		},
		"RosinaHDIcluster_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'RosinaHDIcluster'"
		},
		"RosinaOracleDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'RosinaOracleDB'",
			"defaultValue": "host=localhost;port=1521;sid=FREE;user id=C##azureuser;fetchTSWTZasTimestamp=0"
		},
		"SFTP_AzBlob_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SFTP_AzBlob'"
		},
		"SSISIR_staggingBlob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SSISIR_staggingBlob'"
		},
		"SalesforceLinus_clientSecret": {
			"type": "secureString",
			"metadata": "Secure string for 'clientSecret' of 'SalesforceLinus'"
		},
		"SalesforceV1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SalesforceV1'"
		},
		"SalesforceV1_securityToken": {
			"type": "secureString",
			"metadata": "Secure string for 'securityToken' of 'SalesforceV1'"
		},
		"Sftp_Rosina22env_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Sftp_Rosina22env'"
		},
		"SharePointOnlineList1_servicePrincipalEmbeddedCert": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalEmbeddedCert' of 'SharePointOnlineList1'"
		},
		"Snowflake_EN56775_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Snowflake_EN56775'"
		},
		"SynapseDedictedSql_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SynapseDedictedSql'"
		},
		"AzFileShare_MI_Auth_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://rosinaauestorage.file.core.windows.net/"
		},
		"AzureBlobStorage_aue_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'AzureBlobStorage_aue'"
		},
		"AzureDatabricks_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0805-023922-npdt132b"
		},
		"AzureFunction1_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://rosinafunctionapp.azurewebsites.net"
		},
		"AzureSqlMI_mymi_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "mymi.f3c14a720ce8.database.windows.net"
		},
		"AzureSqlMI_mymi_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AdventureWorksLT2016"
		},
		"AzureSqlMI_mymi_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "SQLadmin"
		},
		"Dataverse_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "f43557ff-9a53-430c-8054-700fde9500d8"
		},
		"DynamicsCRM_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "f43557ff-9a53-430c-8054-700fde9500d8"
		},
		"GitHub1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "1121050482@QQ.COM"
		},
		"Hive1_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "///"
		},
		"Http_CRM_WebAPI_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://org1032cddf.crm6.dynamics.com/api/data/v9.2/sharepointdocuments"
		},
		"Http_CostDetails_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().URL}"
		},
		"Http_GraphAPI_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://graph.microsoft.com/v1.0/drives/',linkedService().driverID)}"
		},
		"ODBC_Oracle_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "C##azureuser"
		},
		"OData1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://org1032cddf.crm6.dynamics.com/api/data/v9.2/"
		},
		"OnPremMySQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "10.1.1.5"
		},
		"OnPremMySQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "rosina"
		},
		"OnPremMySQL_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "azureuser"
		},
		"OnPremSQL_ManagedVNetConnector_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "rosinavm-test.rosina.com"
		},
		"OnPremSQL_ManagedVNetConnector_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "Data"
		},
		"OnPremSQL_ManagedVNetConnector_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "azureuser"
		},
		"OnPrem_SQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().ServerName}"
		},
		"OnPrem_SQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().DBName}"
		},
		"OnPrem_SQL_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "azureuser"
		},
		"OnedriveSource_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().downloadUrl}"
		},
		"REST_Graph_My365Tenant_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://graph.microsoft.com/v1.0/"
		},
		"REST_Graph_My365Tenant_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "f43557ff-9a53-430c-8054-700fde9500d8"
		},
		"REST_Graph_My365Tenant_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "d1becd49-3f8d-435f-8618-f112b530e54c"
		},
		"REST_Graph_My365Tenant_properties_typeProperties_aadResourceId": {
			"type": "string",
			"defaultValue": "https://graph.microsoft.com"
		},
		"RestCostManagement_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://management.azure.com/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/providers/Microsoft.CostManagement/query?api-version=2021-10-01"
		},
		"RestService_Graph_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://graph.microsoft.com/v1.0/"
		},
		"RestService_Graph_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "c6129fc7-7054-42d8-8b15-4a4492081a09"
		},
		"RestService_Graph_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "5a8e8dfb-bc71-4aa2-af2b-cdbda1390286"
		},
		"RestService_Graph_properties_typeProperties_aadResourceId": {
			"type": "string",
			"defaultValue": "https://graph.microsoft.com"
		},
		"Rest_AzStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rosinaauestorage.file.core.windows.net/"
		},
		"Rest_AzStorage_properties_typeProperties_aadResourceId": {
			"type": "string",
			"defaultValue": "https://storage.azure.com"
		},
		"Rest_rosina112adlsgen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rosina112adlsgen2.file.core.windows.net/"
		},
		"Rest_rosina112adlsgen2_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "4abad096-20e9-402a-9f8a-47e067ffc8df"
		},
		"Rest_rosina112adlsgen2_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "c4512961-29bd-4ae1-b3f7-c16c713d5089"
		},
		"Rest_rosina112adlsgen2_properties_typeProperties_aadResourceId": {
			"type": "string",
			"defaultValue": "https://storage.azure.com"
		},
		"RosinaADLS_gen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rosinaauestorage.dfs.core.windows.net/"
		},
		"RosinaAKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://Rosina-AKV.vault.azure.net/"
		},
		"RosinaHDIcluster_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "azureuser"
		},
		"Rosina_AKV_External_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://Rosina-AKV-External.vault.azure.net/"
		},
		"SFTP_AzBlob_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "rosinaauestorage.blob.core.windows.net"
		},
		"SFTP_AzBlob_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "rosinaauestorage.azureuser"
		},
		"SPO_Http_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://m365x68336840.sharepoint.com/sites/RosinaSite/_api/web/"
		},
		"SalesforceLinus_properties_typeProperties_environmentUrl": {
			"type": "string",
			"defaultValue": "https://datamovement-dev-ed.my.salesforce.com/"
		},
		"SalesforceLinus_properties_typeProperties_clientId": {
			"type": "string",
			"defaultValue": "3MVG9fMtCkV6eLhcwZpJZTjXp4aoCeKzffeGchTQ3Mz8LFeJGUc7TQ0fOxGoLffGf.HQg4pN_xcw63Rshh5w."
		},
		"SalesforceV1_properties_typeProperties_environmentUrl": {
			"type": "string",
			"defaultValue": "https://datamovement-dev-ed.my.salesforce.com/"
		},
		"SalesforceV1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "datatransfersh@live.com"
		},
		"Sftp_Rosina22env_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "10.1.1.5"
		},
		"Sftp_Rosina22env_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "azureuser"
		},
		"SharePointOnlineList1_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "f43557ff-9a53-430c-8054-700fde9500d8"
		},
		"Snowflake_EN56775_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "ROSINASNOWFLAKE"
		},
		"Snowflake_EN56775_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "qaggkyi-en56775.snowflakecomputing.com"
		},
		"SynapseDedictedSql_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "tcp:rosinasynapse.sql.azuresynapse.net,1433"
		},
		"SynapseDedictedSql_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "RosinaDeicatedSqlPool"
		},
		"SynapseDedictedSql_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "azureuser"
		},
		"StorageEvent_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.Storage/storageAccounts/rosinaauestorage"
		},
		"RosinaSSISIR_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint": {
			"type": "string",
			"defaultValue": "rosina-sqlmi.ec0eedb99a74.database.windows.net"
		},
		"RosinaSSISIR_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName": {
			"type": "string",
			"defaultValue": "azureuser"
		},
		"RosinaSSISIR_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword": {
			"type": "secureString"
		},
		"AzureKeyVault_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaLabRG/providers/Microsoft.KeyVault/vaults/Rosina-AKV"
		},
		"AzureKeyVault_properties_groupId": {
			"type": "string",
			"defaultValue": "vault"
		},
		"AzureKeyVault_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"rosina-akv.vault.azure.net"
			]
		},
		"AzureSqlMI_mymi_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/57b69ca2-28c0-44e4-a3a9-b8f162590321/resourceGroups/RG-zongmei/providers/Microsoft.Sql/managedInstances/mymi"
		},
		"AzureSqlMI_mymi_properties_groupId": {
			"type": "string",
			"defaultValue": "managedInstance"
		},
		"AzureSqlMI_mymi_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"mymi.f3c14a720ce8.database.windows.net"
			]
		},
		"MPE_rosinaexternalstorage_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.Storage/storageAccounts/rosinaexternalstorage"
		},
		"MPE_rosinaexternalstorage_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"MPE_rosinaexternalstorage_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"rosinaexternalstorage.blob.core.windows.net"
			]
		},
		"ManagedPE_ADLSgen2_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.Storage/storageAccounts/rosinaauestorage"
		},
		"ManagedPE_ADLSgen2_properties_groupId": {
			"type": "string",
			"defaultValue": "dfs"
		},
		"ManagedPE_ADLSgen2_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"rosinaauestorage.dfs.core.windows.net"
			]
		},
		"PrivateLinkService_OnPremSQL_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.Network/privateLinkServices/RosinaPrivateLinkService"
		},
		"PrivateLinkService_OnPremSQL_properties_groupId": {
			"type": "string",
			"defaultValue": ""
		},
		"PrivateLinkService_OnPremSQL_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"rosinavm-test.rosina.com"
			]
		},
		"rosinaauestorageMPE_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.Storage/storageAccounts/rosinaauestorage"
		},
		"rosinaauestorageMPE_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"rosinaauestorageMPE_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"rosinaauestorage.blob.core.windows.net"
			]
		},
		"default_properties_SnowflakeLSJSON_value": {
			"type": "object",
			"defaultValue": {
				"name": "Snowflake_EN56775",
				"type": "Microsoft.DataFactory/factories/linkedservices",
				"properties": {
					"description": "https://qaggkyi-en56775.snowflakecomputing.com\nUsername ROSINAWANG\n",
					"annotations": [],
					"type": "SnowflakeV2",
					"typeProperties": {
						"authenticationType": "Basic",
						"accountIdentifier": "EN56775",
						"user": "ROSINAWANG",
						"database": "ROSINASNOWFLAKE",
						"warehouse": "ROSINA_WAREHOUSE",
						"host": "qaggkyi-en56775.snowflakecomputing.com",
						"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQEUxM0E3Q0M4LTNBRkEtNDk2MS1BRjA5LTM5RTcxRkVGMTAzMV9jMjM0MTMwYy04MDVmLTRkZGEtYWY2NC0xMDk3YmJmNTY5YjgiDQp9"
					}
				}
			}
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADF APIs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://learn.microsoft.com/en-us/rest/api/datafactory/pipelines/get?view=rest-datafactory-2018-06-01&tabs=HTTP",
				"activities": [
					{
						"name": "Get ADF Pipelines",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://management.azure.com/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaLabRG/providers/Microsoft.DataFactory/factories/RosinaLabADF/pipelines/ADFWorkerPipeline?api-version=2018-06-01",
							"authentication": {
								"resource": "https://management.azure.com",
								"credential": {
									"referenceName": "credential_RosinaApp",
									"type": "CredentialReference"
								},
								"userTenant": "16b3c013-d300-468d-ac64-7eda0820b6d3"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/credentials/credential_RosinaApp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADFWorkerPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CRM OData API get SPO file metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This will not work for \"sharepointdocuments\" by-design, CRM API has limitation that cannot fetch multi-item, the result will be emplty. If use fetch query. will see 401 failure. CRM team suggest cx to use other methods instead of Odata.",
				"activities": [
					{
						"name": "GraphAPI list children works",
						"description": "GET https://graph.microsoft.com/v1.0/drives/{drive-id}/root:/{path-relative-to-root}:/children\n\nhttps://graph.microsoft.com/v1.0/drives/b!gcWE3M-17Ui8fXyY75RS7_dQxDsv5HNJoCVP8FfQZEkVoSmarC4ARKgTnYUZs-p2/root:/Shared%20Documents/MyFiles:/children\n",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://graph.microsoft.com/v1.0/drives/',pipeline().parameters.DriverID,pipeline().parameters.FolderPath,':/children')",
								"type": "Expression"
							},
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": {
									"value": "@pipeline().parameters.TenantID",
									"type": "Expression"
								},
								"username": {
									"value": "@pipeline().parameters.ClientID",
									"type": "Expression"
								},
								"resource": "https://graph.microsoft.com/",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "RosinaAKV",
										"type": "LinkedServiceReference"
									},
									"secretName": "RosinaSPO-ServicePrincipal-Key"
								}
							}
						}
					},
					{
						"name": "Get sharepointdocuments",
						"description": "CRM API has limitation that cannot fetch multi-item, the result will be emplty",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get Dynamics API Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ',activity('Get Dynamics API Token').output.access_token)",
									"type": "Expression"
								}
							},
							"url": "https://org1032cddf.crm6.dynamics.com/api/data/v9.2/sharepointdocuments"
						}
					},
					{
						"name": "Get Dynamics API Token",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get Application Client Key from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',pipeline().parameters.TenantID,'/oauth2/v2.0/token')",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=',pipeline().parameters.ClientID,'&client_secret=',activity('Get Application Client Key from AKV').output.value,'&scope=',pipeline().parameters.YourDynamicURL,'/.default')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Application Client Key from AKV",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat(pipeline().parameters.ClientKeyAkvUrl,'?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"YourDynamicURL": {
						"type": "string",
						"defaultValue": "https://org1032cddf.crm6.dynamics.com"
					},
					"TenantID": {
						"type": "string",
						"defaultValue": "d1becd49-3f8d-435f-8618-f112b530e54c"
					},
					"ClientID": {
						"type": "string",
						"defaultValue": "f43557ff-9a53-430c-8054-700fde9500d8"
					},
					"ClientKeyAkvUrl": {
						"type": "string",
						"defaultValue": "https://rosina-akv.vault.azure.net/secrets/RosinaSPO-ServicePrincipal-Key/9effa7ff7c254afbbb1beb5b8d98f10e"
					},
					"DriverID": {
						"type": "string",
						"defaultValue": "b!gcWE3M-17Ui8fXyY75RS7_dQxDsv5HNJoCVP8FfQZEkVoSmarC4ARKgTnYUZs-p2"
					},
					"FolderPath": {
						"type": "string",
						"defaultValue": "/root:/MyFiles"
					}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Call Fabric Notebook API')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "POST Run Fabric Notebook",
						"description": "https://learn.microsoft.com/en-us/fabric/data-engineering/notebook-public-api",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Fabric Account Token from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ',activity('Get Fabric Account Token from AKV').output.value)",
									"type": "Expression"
								}
							},
							"turnOffAsync": true,
							"url": "https://api.fabric.microsoft.com/v1/workspaces/ff84522d-4fb4-4565-8028-1ba8802e22eb/items/11b73e80-fda5-4902-96bf-40da6c147c70/jobs/instances?jobType=RunNotebook",
							"body": {
								"executionData": {
									"configuration": {
										"useStarterPool": true
									}
								}
							}
						}
					},
					{
						"name": "Get Fabric Account Token from AKV",
						"description": "This token will exprire every 1 hour, run Fabric notebook to get it again. Or you can save it to any DB and query it out to use.\n\n### Notebook Python Code as below shared by lei.sun\naccess_token = mssparkutils.credentials.getToken(\"pbi\") \nprint(\"access token\" + access_token) \n\n# (NOT suggested to share to cx) \n# By-design token will not show-up，can show with below. Then, in notepad++, replace all '','' as empty string ''\na= list(access_token)\nprint(a)\n",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/FabircAccountAccessToken/94f21fff74424e4ab47c60d3207de0b1?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Until Notebook Completed or Failed",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Set NotebookResult",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(equals(variables('NotebookResult'),'Completed'),equals(variables('NotebookResult'),'Failed'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait for Notebook to start run",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 60
									}
								},
								{
									"name": "Get Notebook Execution Result",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait for Notebook to start run",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@concat('Bearer ',activity('Get Fabric Account Token from AKV').output.value)",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@activity('POST Run Fabric Notebook').output.ADFWebActivityResponseHeaders.Location",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update NotebookResult",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Notebook Execution Result",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "NotebookResult",
										"value": {
											"value": "@activity('Get Notebook Execution Result').output.status",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Set NotebookResult",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "POST Run Fabric Notebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "NotebookResult",
							"value": "Started"
						}
					},
					{
						"name": "If Notebook Run Completed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Until Notebook Completed or Failed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('NotebookResult'),'Completed')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Execute Fabric Notebook result is Failed",
										"errorCode": "Failed Notebook Run"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"NotebookResult": {
						"type": "String"
					},
					"NotebookLocationURL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Databricks Delta Lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureDatabricksDeltaLakeSink",
								"importSettings": {
									"type": "AzureDatabricksDeltaLakeImportCommand"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ADLS_Parquet_V2",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "ParquetV2_FutureTime_Varchar50.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DatabricksDeltaLakeDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_Parquet_V2')]",
				"[concat(variables('factoryId'), '/datasets/DatabricksDeltaLakeDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Dynamics CRM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://make.powerapps.com/environments/Default-d1becd49-3f8d-435f-8618-f112b530e54c/entities?tenant=d1becd49-3f8d-435f-8618-f112b530e54c",
				"activities": [
					{
						"name": "CRM attribute value ordered",
						"description": "MyEntity1:\nTotal 46744 rows.\nrandomly 6191 rows has not null values.\n\ngot 12118 rows with\n<attribute name=\"cr4fc_productid\" alias=\"ID\" />\n<attribute name=\"cr4fc_productvalue\" alias=\"Value\" />\n<order attribute=\"cr4fc_productvalue\" descending=\"true\" />\n\ngot 46744 rows with \n<all-attributes />\n<order attribute=\"cr4fc_productvalue\" descending=\"true\" />\n",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsCrmSource",
								"query": "<fetch>\n    <entity name=\"cr4fc_myentity1\" >\n<attribute name=\"cr4fc_productid\" alias=\"ID\" />\n<attribute name=\"cr4fc_productvalue\" alias=\"Value\" />\n<order attribute=\"cr4fc_productvalue\" descending=\"true\" />\n      <filter>\n      <condition attribute=\"modifiedon\" operator=\"gt\" value=\"2024-06-18 16:19:11\" />\n    </filter>\n    </entity>\n</fetch>"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DynamicsCRM_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CRM smallset attribute value ordered",
						"description": "MyEntity_Small :\n1-15 rows value are nulls,\n16-30 rows value are not null values,\n30 rows in total\n\n",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsCrmSource",
								"query": "<fetch>\n    <entity name=\"cr4fc_myentity_small\" >\n        <attribute name=\"cr4fc_productvalue\" alias=\"Value\" />\n<order attribute=\"cr4fc_productvalue\" descending=\"true\" />      \n            <filter>\n      <condition attribute=\"modifiedon\" operator=\"gt\" value=\"2024-06-18 16:19:11\" />\n    </filter>\n    </entity>\n</fetch>"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DynamicsCRM_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Dynamics All attributes ordered",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DynamicsCrmSource",
								"query": "<fetch>\n    <entity name=\"cr4fc_myentity1\" >\n     <all-attributes />\n     <order attribute=\"cr4fc_productvalue\" descending=\"true\" />\n      <filter>\n      <condition attribute=\"modifiedon\" operator=\"gt\" value=\"2024-06-18 16:19:11\" />\n    </filter>\n    </entity>\n</fetch>"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DynamicsCRM_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set 46744_Value_Order",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "CRM attribute value ordered",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Rows_46744_Value_Order",
							"value": {
								"value": "@activity('CRM attribute value ordered').output.rowsRead",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set 30_Value_Order",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "CRM smallset attribute value ordered",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Rows_30_Value_Order",
							"value": {
								"value": "@activity('CRM smallset attribute value ordered').output.rowsRead",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set 46744_All_Order",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Copy Dynamics All attributes ordered",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Rows_46744_All_Order",
							"value": {
								"value": "@activity('Copy Dynamics All attributes ordered').output.rowsRead",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CRM attribute value ordered Dataverse",
						"description": "MyEntity1:\nTotal 46744 rows.\nrandomly 6191 rows has not null values.\n\ngot 12118 rows with\n<attribute name=\"cr4fc_productid\" alias=\"ID\" />\n<attribute name=\"cr4fc_productvalue\" alias=\"Value\" />\n<order attribute=\"cr4fc_productvalue\" descending=\"true\" />\n\ngot 46744 rows with \n<all-attributes />\n<order attribute=\"cr4fc_productvalue\" descending=\"true\" />\n",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": "<fetch>\n    <entity name=\"cr4fc_myentity1\" >\n<attribute name=\"cr4fc_productid\" alias=\"ID\" />\n<attribute name=\"cr4fc_productvalue\" alias=\"Value\" />\n<order attribute=\"cr4fc_productvalue\" descending=\"true\" />\n      <filter>\n      <condition attribute=\"modifiedon\" operator=\"gt\" value=\"2024-06-18 16:19:11\" />\n    </filter>\n    </entity>\n</fetch>"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DataverseEntity",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Rows_46744_Value_Order": {
						"type": "Integer",
						"defaultValue": 0
					},
					"Rows_30_Value_Order": {
						"type": "Integer",
						"defaultValue": 0
					},
					"Rows_46744_All_Order": {
						"type": "Integer",
						"defaultValue": 0
					},
					"results": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DynamicsCRM_dataset')]",
				"[concat(variables('factoryId'), '/datasets/RosinaADLS_gen2_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DataverseEntity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy JSON to SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "for AVA 2409180030000021",
				"activities": [
					{
						"name": "JSON to SP",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "fldMarketDataImportFileName",
										"value": "$$FILENAME"
									},
									{
										"name": "fldRecordUpdatedUserName",
										"value": {
											"value": "adfProcess",
											"type": "Expression"
										}
									},
									{
										"name": "fldMarketDataImportSource",
										"value": {
											"value": "BBG",
											"type": "Expression"
										}
									},
									{
										"name": "fldNotes",
										"value": {
											"value": "ADFsink_Table",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['DL_SNAPSHOT_START_TIME']"
										},
										"sink": {
											"name": "RetrievedDateTime",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['DL_SNAPSHOT_TZ']"
										},
										"sink": {
											"name": "RetrievedDateTimeTZ",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['IDENTIFIER']"
										},
										"sink": {
											"name": "BBGItem",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RC']"
										},
										"sink": {
											"name": "BBGErrorCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['PX_LAST']"
										},
										"sink": {
											"name": "BBGValue",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fldRecordUpdatedUserName']"
										},
										"sink": {
											"name": "fldRecordUpdatedUserName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fldMarketDataImportSource']"
										},
										"sink": {
											"name": "fldMarketDataImportSource",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['LAST_UPDATE_DT']"
										},
										"sink": {
											"name": "BBGLastUpdateDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fldMarketDataImportFileName']"
										},
										"sink": {
											"name": "fldMarketDataImportFileName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fldNotes']"
										},
										"sink": {
											"name": "fldNotes",
											"type": "String"
										}
									}
								],
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_Table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "DataTable",
									"SchemaName": "dbo"
								}
							}
						]
					},
					{
						"name": "CSV to SP",
						"description": "",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "JSON to CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[uspMarketDataInsert]",
								"sqlWriterTableType": "typeDataTable",
								"storedProcedureTableTypeParameterName": "MarketDataImport",
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "fldMarketDataImportSource",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fldMarketDataImportSource",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fldMarketDataImportFileName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fldMarketDataImportFileName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "BBGErrorCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BBGErrorCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "BBGLastUpdateDate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BBGLastUpdateDate",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fldRecordUpdatedUserName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fldRecordUpdatedUserName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RetrievedDateTime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RetrievedDateTime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RetrievedDateTimeTZ",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "RetrievedDateTimeTZ",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fldNotes",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fldNotes",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "BBGValue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BBGValue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "BBGItem",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BBGItem",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_Table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "JsonOutput",
									"SchemaName": "dbo"
								}
							}
						]
					},
					{
						"name": "JSON to CSV",
						"description": "",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "fldMarketDataImportFileName",
										"value": "$$FILENAME"
									},
									{
										"name": "fldRecordUpdatedUserName",
										"value": {
											"value": "adfProcess",
											"type": "Expression"
										}
									},
									{
										"name": "fldMarketDataImportSource",
										"value": {
											"value": "BBG",
											"type": "Expression"
										}
									},
									{
										"name": "fldNotes",
										"value": {
											"value": "Loaded by ADF",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['DL_SNAPSHOT_START_TIME']"
										},
										"sink": {
											"name": "RetrievedDateTime",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['DL_SNAPSHOT_TZ']"
										},
										"sink": {
											"name": "RetrievedDateTimeTZ",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['IDENTIFIER']"
										},
										"sink": {
											"name": "BBGItem",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['RC']"
										},
										"sink": {
											"name": "BBGErrorCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['PX_LAST']"
										},
										"sink": {
											"name": "BBGValue",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['LAST_UPDATE_DT']"
										},
										"sink": {
											"name": "BBGLastUpdateDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fldMarketDataImportFileName']"
										},
										"sink": {
											"name": "fldMarketDataImportFileName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fldRecordUpdatedUserName']"
										},
										"sink": {
											"name": "fldRecordUpdatedUserName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fldMarketDataImportSource']"
										},
										"sink": {
											"name": "fldMarketDataImportSource",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['fldNotes']"
										},
										"sink": {
											"name": "fldNotes",
											"type": "String"
										}
									}
								],
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_JSON')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Table')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy OneDrive File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Http source",
				"activities": [
					{
						"name": "Get Download URL",
						"description": "URL:\nhttps://graph.microsoft.com/v1.0/users/0e197347-b631-4475-81d8-ed52956c2af7/drive/root:/Apps/Book.xlsx\n\nGet UserID from M365 admin center:\nhttps://entra.microsoft.com/#view/Microsoft_AAD_IAM/TenantOverview.ReactView?Microsoft_AAD_IAM_legacyAADRedirect=true\n\nShow more -> Identity -> Users -> The user -> ObjectID",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://graph.microsoft.com/v1.0/users/0e197347-b631-4475-81d8-ed52956c2af7/drive/root:/Apps/Book.xlsx",
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": "d1becd49-3f8d-435f-8618-f112b530e54c",
								"username": "f43557ff-9a53-430c-8054-700fde9500d8",
								"resource": "https://graph.microsoft.com/",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "RosinaAKV",
										"type": "LinkedServiceReference"
									},
									"secretName": "RosinaSPO-ServicePrincipal-Key"
								}
							}
						}
					},
					{
						"name": "Copy Binary Excel to ADLS",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get Download URL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "@{concat('Authorization: Bearer ',activity('Get Bearer Token').output.access_token)}",
										"type": "Expression"
									}
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "HttpBinaryDataset",
								"type": "DatasetReference",
								"parameters": {
									"downloadUrl": {
										"value": "@activity('Get Download URL').output['@microsoft.graph.downloadUrl']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OracleTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Excel Sheet to Oracle",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Download URL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "@{concat('Authorization: Bearer ',activity('Get Bearer Token').output.access_token)}",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OnDriveExcel",
								"type": "DatasetReference",
								"parameters": {
									"DownloadURL": {
										"value": "@activity('Get Download URL').output['@microsoft.graph.downloadUrl']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OracleTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get Bearer Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get App Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://accounts.accesscontrol.windows.net/d1becd49-3f8d-435f-8618-f112b530e54c/tokens/OAuth/2",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=46a4babd-9d6d-4516-87d4-cfdee1a2e7ef@d1becd49-3f8d-435f-8618-f112b530e54c&client_secret=',activity('Get App Client Key').output.value,'&resource=00000003-0000-0ff1-ce00-000000000000/m365x68336840.sharepoint.com@d1becd49-3f8d-435f-8618-f112b530e54c')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get App Client Key",
						"description": "App in dif tennat so just for reference\ncannot be enabled for test in this lab",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/SPO-Tenant-AppKey/0e71f6d824944fa3a58ee63b2eeb3b03?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HttpBinaryDataset')]",
				"[concat(variables('factoryId'), '/datasets/OracleTable')]",
				"[concat(variables('factoryId'), '/datasets/OnDriveExcel')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy Oracle with query and partition",
						"description": "if oracle source is: 【using query + using Dynamic range partition + do not want to set upper and lower bounds】\nThen:\nyou need to choose the table name in dataset and confirm that table contains the column you used for partition",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT \n   *\nFROM \n    ONEDRIVE_SINK o\nJOIN \n    ONEDRIVE_SINK1 s\nON \n    o.NO = s.ID \nWHERE ?AdfRangePartitionColumnName <= ?AdfRangePartitionUpbound AND ?AdfRangePartitionColumnName >= ?AdfRangePartitionLowbound;",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": "ID",
									"partitionUpperBound": "",
									"partitionLowerBound": ""
								},
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable')]",
				"[concat(variables('factoryId'), '/datasets/RosinaADLS_gen2_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Parquet V1 and V2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy SQL to ParquetV2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select * from dbo.testFutureTime t0 where t0.AdmitDtm=convert(datetime,'8888-01-01 00:02:00')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "On_PremSQL_Table_test",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "testFutureTime"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Parquet_V2",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "V2_manualMapped.parquet"
								}
							}
						]
					},
					{
						"name": "Copy parquetV2 back to SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy SQL to ParquetV2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CreatedWhen",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "CreatedWhen",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "INT_32"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "AdmitDtm",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "AdmitDtm",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Parquet_V2",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "V2_manualMapped.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "On_PremSQL_Table_test",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "testFutureTime_Output_V2"
								}
							}
						]
					},
					{
						"name": "Copy parquetV2 to csv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy SQL to ParquetV2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Parquet_V2",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "V2_manualMapped.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "ParquetV2_output.csv"
								}
							}
						]
					},
					{
						"name": "Copy SQL to ParquetV1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "On_PremSQL_Table_test",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "testFutureTime"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "V1_manualMapped.parquet"
								}
							}
						]
					},
					{
						"name": "Copy parquetV1 back to SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy SQL to ParquetV1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CreatedWhen",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "CreatedWhen",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "INT32"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "AdmitDtm",
											"type": "DateTime",
											"physicalType": "INT96"
										},
										"sink": {
											"name": "AdmitDtm",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "V1_manualMapped.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "On_PremSQL_Table_test",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "testFutureTime_Output_V1"
								}
							}
						]
					},
					{
						"name": "Copy parquetV1 to csv_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy SQL to ParquetV1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "V1_manualMapped.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "ParquetV1_output.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/On_PremSQL_Table_test')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Parquet_V2')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Parquet files with dif type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "input/ParquetFiles",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Parquet_V2",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "7b36.zstd.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_SQL_Table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Sink_Parquet_Combined",
									"SchemaName": "dbo"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_Parquet_V2')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Parquet to Snowflake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to ParquetV2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OnPrem_SQL_Table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "Production",
									"TableName": "ProductCategory"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BlobStorage_Parquet_V2",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "ParquetV2_FutureTime_Varchar50.parquet"
								}
							}
						]
					},
					{
						"name": "Copy ParquetV2 to Snowflake",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data to ParquetV2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "BlobStorage_Parquet_V2",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "ParquetV2_FutureTime_Varchar50.parquet"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SnowflakeTable_ROSINASNOWFLAKE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OnPrem_SQL_Table')]",
				"[concat(variables('factoryId'), '/datasets/BlobStorage_Parquet_V2')]",
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable_ROSINASNOWFLAKE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Parquet with SHIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink1.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sinktest.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy REST FileShare to ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from azure file share",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"x-ms-version": "2023-08-03",
									"x-ms-file-request-intent": "backup",
									"x-ms-date": {
										"value": "@concat(formatDateTime(utcnow(),'ddd, dd MMM yyyy hh:mm:ss'),' ','GMT')",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "REST_AzureFS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/REST_AzureFS')]",
				"[concat(variables('factoryId'), '/datasets/RosinaADLS_gen2_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy REST FileShare to ADLS_SHIR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from azure file share",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"x-ms-version": "2023-08-03",
									"x-ms-file-request-intent": "backup",
									"x-ms-date": {
										"value": "@concat(formatDateTime(utcnow(),'ddd, dd MMM yyyy hh:mm:ss'),' ','GMT')",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "REST_AzureFS_112",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/REST_AzureFS_112')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy SFTP with Delete after completion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy binary from SFTP to ADLS",
						"description": "Adding \"includeSpecialFiles\": true, to this activity JSON for source settings\nRef: https://supportability.visualstudio.com/AzureDataFactory/_wiki/wikis/AzureDataFactory/611509/Copy-Soft-links-using-Copy-activity",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "SftpReadSettings",
									"includeSpecialFiles": true,
									"recursive": true,
									"deleteFilesAfterCompletion": true,
									"disableChunking": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary_SFTP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_SFTP",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "RosinaADLS_gen2",
									"type": "LinkedServiceReference"
								},
								"path": "stagging"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "SftpReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"disableChunking": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary_SFTP')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Binary')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy SPO file with SPN key')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Bearer Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get App Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://accounts.accesscontrol.windows.net/d1becd49-3f8d-435f-8618-f112b530e54c/tokens/OAuth/2",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=46a4babd-9d6d-4516-87d4-cfdee1a2e7ef@d1becd49-3f8d-435f-8618-f112b530e54c&client_secret=',activity('Get App Client Key').output.value,'&resource=00000003-0000-0ff1-ce00-000000000000/m365x68336840.sharepoint.com@d1becd49-3f8d-435f-8618-f112b530e54c')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy SPO file to ADLS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "@concat('Authorization: Bearer ',activity('Get Bearer Token').output.access_token)",
										"type": "Expression"
									}
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SPO_file_Binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get SPO file",
						"description": "Option1: Use REST",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ',activity('Get Bearer Token').output.access_token)",
									"type": "Expression"
								}
							},
							"url": "https://m365x68336840.sharepoint.com/sites/RosinaSite/_api/web/GetFileByServerRelativeUrl('/sites/RosinaSite/Shared%20Documents/MyFiles/Test_Excel.xlsx')/$value"
						}
					},
					{
						"name": "Get Graph download URL",
						"description": "Option2: use Graph Http\n\n拿到graph ID\nhttps://graph.microsoft.com/v1.0/sites/healthqld.sharepoint.com,076c1ecf-c935-4102-b428-c69dc6f4b1be,c74109fb-021f-40f6-9625-3f63114975e8/drives\n\n拿到binary：\nhttps://graph.microsoft.com/v1.0/sites/healthqld.sharepoint.com,076c1ecf-c935-4102-b428-c69dc6f4b1be,c74109fb-021f-40f6-9625-3f63114975e8/drive/root:/Shared%20Documents/Mapping.xlsx:/content",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Authorization": "Bearer+ token"
							},
							"url": "https://graph.microsoft.com/v1.0/sites/healthqld.sharepoint.com,076c1ecf-c935-4102-b428-c69dc6f4b1be,c74109fb-021f-40f6-9625-3f63114975e8/drives/b!zx5sBzXJAkG0KMadxvSxvvsJQccfAvZAliU_YxFJdehb0nxyLtQDQbrO8xFnXe3l/root:/Mapping.xlsx"
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get Graph download URL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@activity('Get Graph download URL').output['microsoft.graph.downloadUrl']",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get App Client Key",
						"description": "App in dif tennat so just for reference\ncannot be enabled for test in this lab",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/SPO-Tenant-AppKey/0e71f6d824944fa3a58ee63b2eeb3b03?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SharePointOnlineListSource",
								"httpRequestTimeout": "00:05:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SharePointOnlineListDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink1.csv"
								}
							}
						]
					},
					{
						"name": "Get SPO file_InlineSPNAuth",
						"description": "SPO cannot use inline auth",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://m365x68336840.sharepoint.com/sites/RosinaSite/_api/web/GetFileByServerRelativeUrl('/sites/RosinaSite/Shared%20Documents/MyFiles/Test_Excel.xlsx')/$value",
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": "d1becd49-3f8d-435f-8618-f112b530e54c",
								"username": "f43557ff-9a53-430c-8054-700fde9500d8",
								"resource": {
									"value": "@concat('00000003-0000-0ff1-ce00-000000000000/m365x68336840.sharepoint.com@d1becd49-3f8d-435f-8618-f112b530e54c')",
									"type": "Expression"
								},
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "RosinaAKV",
										"type": "LinkedServiceReference"
									},
									"secretName": "RosinaSPO-ServicePrincipal-Key"
								}
							}
						}
					},
					{
						"name": "Get Bearer Token_copy1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get App Client Key_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://accounts.accesscontrol.windows.net/d1becd49-3f8d-435f-8618-f112b530e54c/tokens/OAuth/2",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=46a4babd-9d6d-4516-87d4-cfdee1a2e7efd1becd49-3f8d-435f-8618-f112b530e54c&client_secret=',activity('Get App Client Key_copy1').output.value,'&resource=00000003-0000-0ff1-ce00-000000000000/m365x68336840.sharepoint.comd1becd49-3f8d-435f-8618-f112b530e54c')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get App Client Key_copy1",
						"description": "App in dif tennat so just for reference\ncannot be enabled for test in this lab",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/SPO-Tenant-AppKey/0e71f6d824944fa3a58ee63b2eeb3b03?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SPO_file_Binary')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Binary')]",
				"[concat(variables('factoryId'), '/datasets/SharePointOnlineListDataset')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy SPO-GraphAPI file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get SPO site file Download URL",
						"description": "URL:\nGET https://graph.microsoft.com/v1.0/sites/{site-id}/drives/{drive-id}/root:/{file-path}\nAuthorization: Bearer {access_token}\n\nRef https://learn.microsoft.com/en-us/graph/api/site-getbypath?view=graph-rest-1.0\n\nGet UserID from M365 admin center:\nhttps://entra.microsoft.com/#view/Microsoft_AAD_IAM/TenantOverview.ReactView?Microsoft_AAD_IAM_legacyAADRedirect=true\n\nShow more -> Identity -> Users -> The user -> ObjectID",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://graph.microsoft.com/v1.0/sites/',pipeline().parameters.SiteID,'/drives/',pipeline().parameters.DriverID,'/root:/',pipeline().parameters.FilePath)",
								"type": "Expression"
							},
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": "d1becd49-3f8d-435f-8618-f112b530e54c",
								"username": "f43557ff-9a53-430c-8054-700fde9500d8",
								"resource": "https://graph.microsoft.com/",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "RosinaAKV",
										"type": "LinkedServiceReference"
									},
									"secretName": "RosinaSPO-ServicePrincipal-Key"
								}
							}
						}
					},
					{
						"name": "GraphAPI Get SiteID",
						"description": "GET https://graph.microsoft.com/v1.0/sites/{hostname}:/{site-path}\nAuthorization: Bearer {access_token}\n\n{hostname}: SharePoint站点的主机名，例如yourdomain.sharepoint.com\n{site-path}: SharePoint站点的路径，例如/sites/yoursite",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://graph.microsoft.com/v1.0/sites/m365x68336840.sharepoint.com:/sites/RosinaSite",
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": "d1becd49-3f8d-435f-8618-f112b530e54c",
								"username": "f43557ff-9a53-430c-8054-700fde9500d8",
								"resource": "https://graph.microsoft.com/",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "RosinaAKV",
										"type": "LinkedServiceReference"
									},
									"secretName": "RosinaSPO-ServicePrincipal-Key"
								}
							}
						}
					},
					{
						"name": "GraphAPI Get DriverID",
						"description": "GET https://graph.microsoft.com/v1.0/sites/{site-id}/drives\nAuthorization: Bearer {access_token}\nResponse Example:\n{\n    \"value\": [\n        {\n            \"id\": \"drive-id\",\n            \"name\": \"Documents\",\n            ...\n        }\n    ]\n}\n",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "GraphAPI Get SiteID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://graph.microsoft.com/v1.0/sites/',activity('GraphAPI Get SiteID').output.id,'/drives')",
								"type": "Expression"
							},
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": "d1becd49-3f8d-435f-8618-f112b530e54c",
								"username": "f43557ff-9a53-430c-8054-700fde9500d8",
								"resource": "https://graph.microsoft.com/",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "RosinaAKV",
										"type": "LinkedServiceReference"
									},
									"secretName": "RosinaSPO-ServicePrincipal-Key"
								}
							}
						}
					},
					{
						"name": "Copy Graph SPO file to ADLS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get SPO site file Download URL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "HttpBinaryDataset",
								"type": "DatasetReference",
								"parameters": {
									"downloadUrl": {
										"value": "@activity('Get SPO site file Download URL').output['@microsoft.graph.downloadUrl']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SiteID": {
						"type": "string",
						"defaultValue": "m365x68336840.sharepoint.com,dc84c581-b5cf-48ed-bc7d-7c98ef9452ef,3bc450f7-e42f-4973-a025-4ff057d06449"
					},
					"DriverID": {
						"type": "string",
						"defaultValue": "b!gcWE3M-17Ui8fXyY75RS7_dQxDsv5HNJoCVP8FfQZEkVoSmarC4ARKgTnYUZs-p2"
					},
					"FilePath": {
						"type": "string",
						"defaultValue": "MyFiles/Book.xlsx"
					}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HttpBinaryDataset')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Binary')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy SPO-http with SPN cert not-working yet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Followed：https://github.com/Chunlong101/SharePointTips/blob/master/Get%20access%20token%20with%20a%20certificate%20to%20call%20sharepoint%20rest%20api%20and%20graph%20api/README.md",
				"activities": [
					{
						"name": "Get OAuthToken with X509Cert JWT token",
						"description": "RUN PowerShell (use AAD app)\n‪cd <PS script file path>\n.\\GetClientAssertion.ps1 -clientId 'f43557ff-9a53-430c-8054-700fde9500d8' -tenantId 'd1becd49-3f8d-435f-8618-f112b530e54c' -scope 'https://m365x68336840.sharepoint.com/.default'",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get client_assertion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-type": "application/x-www-form-urlencoded",
								"Accept": "application/json"
							},
							"url": "https://login.microsoftonline.com/d1becd49-3f8d-435f-8618-f112b530e54c/oauth2/v2.0/token",
							"body": {
								"value": "@concat('scope=https://m365x68336840.sharepoint.com/.default&client_id=f43557ff-9a53-430c-8054-700fde9500d8&grant_type=client_credentials&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&client_assertion=',activity('Get client_assertion').output.value)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get client_assertion",
						"description": "To generate JWT token (client_assertion), follow https://github.com/Chunlong101/SharePointTips/blob/46146e6517c15e1548b196f9b3f82a5ff086b2ac/Get%20access%20token%20with%20a%20certificate%20to%20call%20sharepoint%20rest%20api%20and%20graph%20api/GetAccessTokenByCert.ps1#L2\n\nStored In Rosina-AKV\nRosinaSPO-ServicePrincipal-AADappCert-clientAssertion-JWT-token\n\n# ----- \n# Step 1: Create a self-signed certificate, you can skip this step if you already have a one\n# ----- \n\n\n$CERT_NAME = \"MyX509Cert_AAD\" # need replace\n$CERT_PATH = \"C:\\Self-AssignedX509Cert\" # need replace\n$CERT_Store = \"Cert:\\CurrentUser\\My\" # MMC >> Add/Remove Snap-ins >> Certificates >> Current User >> Personal >> Your Certificates\n$CERT_Subject = \"CN=$($CERT_NAME)\"\n\n$cert = New-SelfSignedCertificate -Subject $CERT_Subject -CertStoreLocation $CERT_Store -KeyExportPolicy Exportable -KeySpec Signature -KeyLength 2048 -KeyAlgorithm RSA -HashAlgorithm SHA256 -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\"\n\n#Set-ExecutionPolicy RemoteSigned #Unrestricted; may error due to policy,export manually\nExport-Certificate -Cert $cert -FilePath \"$CERT_PATH\\$($CERT_NAME).cer\" -Force\n\n# Private key to Base64, not used for current scenario\n$privateKey = [System.Security.Cryptography.X509Certificates.RSACertificateExtensions]::GetRSAPrivateKey($cert)\n$privateKeyBytes = $privateKey.Key.Export([System.Security.Cryptography.CngKeyBlobFormat]::Pkcs8PrivateBlob)\n$privateKeyBase64 = [System.Convert]::ToBase64String($privateKeyBytes, [System.Base64FormattingOptions]::InsertLineBreaks)\n$privateKeyString = @\"\n-----BEGIN PRIVATE KEY-----\n$privateKeyBase64\n-----END PRIVATE KEY-----\n\"@\n \n# Print private key to output\nWrite-Host $privateKeyString\n\n# ----- \n# Step 2: Configure your app in azure app registrations\n# ----- \n\n<# Open Azure Portal >> App registrations >> Your app >> Configure your app with proper SharePoint/Graph permissions, upload the certifcate to Azure App #>\n\n# ----- \n# Step 3: Get the access token with the certificate to call SharePoint REST API and Graph API\n# ----- \n\n# Define the Azure AD tenant ID and app client ID\n$tenantId = \"d1becd49-3f8d-435f-8618-f112b530e54c\"  # need replace\n$clientId = \"f43557ff-9a53-430c-8054-700fde9500d8\"  # need replace\n$CERT_Store = \"Cert:\\CurrentUser\\My\" # need replace\n$CERT_NAME = \"MyX509Cert_AAD\" # need replace\n$CERT_Subject = \"CN=$($CERT_NAME)\"\n\n<# Define the certificate thumbprint\n$thumbprint = \"9a2323356ba9c2c09753a0258bff8ae722b8687b\" #\"YOUR_CERTIFICATE_THUMBPRINT\"\n$cert = Get-Item Cert:\\CurrentUser\\My\\$Thumbprint  #CurrentUser/LocalMachine\n#>\n$cert = Get-ChildItem -Path $CERT_Store | Where-Object { $_.Subject -Match $CERT_Subject } # | Select-Object FriendlyName, Thumbprint, Subject, NotBefore, NotAfter\n$scope = \"https://m365x68336840.sharepoint.com\"  # need replace\n<# for Graph api call test\n$scope=\"https://graph.microsoft.com\"\n#>\n\n# Function to generate a JWT token (client_assertion)\nfunction GenerateJWT ($cert, $clientId, $tenantId, $scope) {\n    $hash = $cert.GetCertHash()\n    $hashValue = [System.Convert]::ToBase64String($hash) -replace '\\+', '-' -replace '/', '_' -replace '='\n\n    $exp = ([DateTimeOffset](Get-Date).AddHours(1).ToUniversalTime()).ToUnixTimeSeconds()\n    $nbf = ([DateTimeOffset](Get-Date).ToUniversalTime()).ToUnixTimeSeconds()\n\n    $jti = New-Guid\n    [hashtable]$header = @{alg = \"RS256\"; typ = \"JWT\"; x5t = $hashValue }\n    [hashtable]$payload = @{aud = \"https://login.microsoftonline.com/$tenantId/oauth2/token\"; iss = \"$clientId\"; sub = \"$clientId\"; jti = \"$jti\"; exp = $Exp; Nbf = $Nbf }\n\n    $headerjson = $header | ConvertTo-Json -Compress\n    $payloadjson = $payload | ConvertTo-Json -Compress\n\n    $headerjsonbase64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($headerjson)).Split('=')[0].Replace('+', '-').Replace('/', '_')\n    $payloadjsonbase64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($payloadjson)).Split('=')[0].Replace('+', '-').Replace('/', '_')\n\n    $toSign = [System.Text.Encoding]::UTF8.GetBytes($headerjsonbase64 + \".\" + $payloadjsonbase64)\n\n    $rsa = $cert.PrivateKey # -as [System.Security.Cryptography.RSACryptoServiceProvider]\n\n    $signature = [Convert]::ToBase64String($rsa.SignData($toSign, [Security.Cryptography.HashAlgorithmName]::SHA256, [Security.Cryptography.RSASignaturePadding]::Pkcs1)) -replace '\\+', '-' -replace '/', '_' -replace '='\n\n    $token = \"$headerjsonbase64.$payloadjsonbase64.$signature\"\n\n    return $token # client_assertion\n}\n\n# Get the client_assertion\n$RequestToken = GenerateJWT -cert $cert -clientId $clientId -tenantId $tenantId -scope $scope\n\n# Output the access token\n# Write-Output \"client_assertion: $AccessToken\"\n\n$RequestTokenString = @\"\n-----BEGIN client_assertion-----\n$RequestToken\n-----END client_assertion-----\n\"@\n \n# Print private key to output\nWrite-Host $RequestTokenString\n",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/RosinaSPO-ServicePrincipal-AADappCert-clientAssertion-JWT-token/c877718944e9494dba3662d4a519b9fb?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy SPO with Cert Auth",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get OAuthToken with X509Cert JWT token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "@{concat('Authorization: Bearer ', activity('Get OAuthToken with X509Cert JWT token').output.access_token)}",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SPO_file_Binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SPO_file_Binary')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Binary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy SQL to Parquet V2 with Datetime as INT64')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_SQL2LH_DatetimeINT64",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Name",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "LastUpdateDatetime",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "LastUpdateDatetime",
											"type": "DateTime",
											"physicalType": "INT_64"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Azure_SQL_Table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "DatetimeDS",
									"SchemaName": "dbo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Parquet_V2",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "Copy_SQL2LH_DatetimeINT64_sink.parquet"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Table')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Parquet_V2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CostManagement API - Billing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Billing",
				"activities": [
					{
						"name": "Get APP Bearer Token",
						"description": "RosinaAPP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://login.microsoftonline.com/16b3c013-d300-468d-ac64-7eda0820b6d3/oauth2/v2.0/token",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=6a26d4de-e457-44fa-b5cf-04a81934fa8d&client_secret=',activity('Get Client Key').output.value,'&scope=https%3A%2F%2Fmanagement.azure.com%2F.default')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Query CostManagement",
						"description": "Note that cost management has build-in export method which allow schdule export to Storage",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get APP Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ',activity('Get APP Bearer Token').output.access_token)",
									"type": "Expression"
								},
								"Content-Type": "application/json"
							},
							"url": "https://management.azure.com/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/providers/Microsoft.CostManagement/query?api-version=2021-10-01",
							"body": {
								"type": "Usage",
								"timeframe": "MonthToDate",
								"dataset": {
									"granularity": "Daily",
									"aggregation": {
										"totalCost": {
											"name": "PreTaxCost",
											"function": "Sum"
										}
									}
								}
							}
						}
					},
					{
						"name": "Get Client Key",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/RosinaAppKey/27dabd3fb095403dbf524816451d4185?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get APP Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:02:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "POST",
								"requestBody": "{\"type\":\"Usage\",\"timeframe\":\"MonthToDate\",\"dataset\":{\"granularity\":\"Daily\",\"aggregation\":{\"totalCost\":{\"name\":\"PreTaxCost\",\"function\":\"Sum\"}}}}",
								"additionalHeaders": {
									"Authorization": {
										"value": "@concat('Bearer ',activity('Get APP Bearer Token').output.access_token)",
										"type": "Expression"
									},
									"Content-Type": "application/json"
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Rest_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Generate Cost Details Report",
						"description": "https://learn.microsoft.com/en-us/rest/api/cost-management/generate-cost-details-report/create-operation?view=rest-cost-management-2023-11-01&tabs=HTTP#generatecostdetailsreportbycustomerandtimeperiod\n\nScopes to use\nhttps://learn.microsoft.com/en-us/azure/cost-management-billing/costs/understand-work-scopes",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get APP Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ',activity('Get APP Bearer Token').output.access_token)",
									"type": "Expression"
								},
								"Content-Type": "application/json"
							},
							"url": "https://management.azure.com/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/providers/Microsoft.CostManagement/generateCostDetailsReport?api-version=2022-05-01",
							"body": {
								"metric": "ActualCost",
								"timePeriod": {
									"start": "2024-08-01",
									"end": "2024-09-01"
								}
							}
						}
					},
					{
						"name": "Copy Details Report to ADLS",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Generate Cost Details Report",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Http_CSV",
								"type": "DatasetReference",
								"parameters": {
									"URL": {
										"value": "@activity('Generate Cost Details Report').output.manifest.blobs[0].blobLink",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Rest_JSON')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_JSON')]",
				"[concat(variables('factoryId'), '/datasets/Http_CSV')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databricks Notebook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Test Notebook"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamics Dataverse API - BulkDeleteAction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "reference:\nhttps://learn.microsoft.com/en-us/power-apps/developer/data-platform/webapi/reference/bulkdelete?view=dataverse-latest",
				"activities": [
					{
						"name": "Bulk Delete Action",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Dynamics API Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json",
								"Authorization": {
									"value": "@concat('Bearer ',activity('Get Dynamics API Token').output.access_token)",
									"type": "Expression"
								}
							},
							"disableCertValidation": true,
							"turnOffAsync": false,
							"url": {
								"value": "@concat(pipeline().parameters.YourDynamicURL,'/api/data/v9.2/BulkDelete')",
								"type": "Expression"
							},
							"body": {
								"value": "@json(concat(\n  '{',\n    '\"JobName\":\"DeleteAsyncOperations-OnOrBefore', pipeline().parameters.OnOrBeforeDate, '\",',\n    '\"QuerySet\":[{',\n      '\"EntityName\":\"asyncoperation\",',\n      '\"Criteria\":{',\n        '\"@odata.type\":\"Microsoft.Dynamics.CRM.FilterExpression\",',\n        '\"FilterOperator\":\"And\",',\n        '\"Conditions\":[{',\n          '\"AttributeName\":\"modifiedon\",',\n          '\"Operator\":\"OnOrBefore\",',\n          '\"Values\":[{',\n            '\"Value\":\"', pipeline().parameters.OnOrBeforeDate, 'T00:00:00Z\",',\n            '\"Type\":\"System.DateTime\"',\n          '}]',\n        '}]',\n      '}',\n    '}],',\n    '\"StartDateTime\":\"', pipeline().parameters.StartDateTime, '\",',\n    '\"RecurrencePattern\":\"FREQ=DAILY;INTERVAL=365\",',\n    '\"SendEmailNotification\":false,',\n    '\"ToRecipients\":[],',\n    '\"CCRecipients\":[]',\n  '}'\n))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Dynamics API Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Application Client Key from AKV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": {
								"value": "@concat('https://login.microsoftonline.com/',pipeline().parameters.TenantID,'/oauth2/v2.0/token')",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=',pipeline().parameters.ClientID,'&client_secret=',activity('Get Application Client Key from AKV').output.value,'&scope=',pipeline().parameters.YourDynamicURL,'/.default')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Application Client Key from AKV",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat(pipeline().parameters.ClientKeyAkvUrl,'?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"OnOrBeforeDate": {
						"type": "string",
						"defaultValue": "2025-05-08"
					},
					"StartDateTime": {
						"type": "string",
						"defaultValue": "2025-06-04T03:12:00Z"
					},
					"YourDynamicURL": {
						"type": "string",
						"defaultValue": "https://org1032cddf.crm6.dynamics.com"
					},
					"TenantID": {
						"type": "string",
						"defaultValue": "d1becd49-3f8d-435f-8618-f112b530e54c"
					},
					"ClientID": {
						"type": "string",
						"defaultValue": "f43557ff-9a53-430c-8054-700fde9500d8"
					},
					"ClientKeyAkvUrl": {
						"type": "string",
						"defaultValue": "https://rosina-akv.vault.azure.net/secrets/RosinaSPO-ServicePrincipal-Key/9effa7ff7c254afbbb1beb5b8d98f10e"
					}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/External Activity Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "http_trigger1",
							"body": {
								"name": "Rosina"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "AzureFunction1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureFunction1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Bearer Token Azure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get APP Bearer Token",
						"description": "RosinaAPP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://login.microsoftonline.com/16b3c013-d300-468d-ac64-7eda0820b6d3/oauth2/v2.0/token",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=6a26d4de-e457-44fa-b5cf-04a81934fa8d&client_secret=',activity('Get Client Key').output.value,'&scope=https%3A%2F%2Fmanagement.azure.com%2F.default')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Client Key",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/RosinaAppKey/27dabd3fb095403dbf524816451d4185?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Bearer Token Azure_My365Tenant')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get APP Bearer Token",
						"description": "RosinaAPP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://login.microsoftonline.com/d1becd49-3f8d-435f-8618-f112b530e54c/oauth2/v2.0/token",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=f43557ff-9a53-430c-8054-700fde9500d8&client_secret=',activity('Get Client Key').output.value,'&scope=https%3A%2F%2Fmanagement.azure.com%2F.default')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Client Key",
						"description": "RosinaSPO-ServicePrincipal-Key",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/RosinaSPO-ServicePrincipal-Key/0635da62812e4f5abaa925fe9d5e56f3?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Bearer token 365')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Bearer Token Personal Tenant",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://login.microsoftonline.com/16b3c013-d300-468d-ac64-7eda0820b6d3/oauth2/token",
							"body": "grant_type=client_credentials&client_id=6a26d4de-e457-44fa-b5cf-04a81934fa8d&client_secret=<???>&resource=\nhttps://management.azure.com"
						}
					},
					{
						"name": "Get Bearer Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get App Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://accounts.accesscontrol.windows.net/d1becd49-3f8d-435f-8618-f112b530e54c/tokens/OAuth/2",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=46a4babd-9d6d-4516-87d4-cfdee1a2e7ef@d1becd49-3f8d-435f-8618-f112b530e54c&client_secret=',activity('Get App Client Key').output.value,'&resource=00000003-0000-0ff1-ce00-000000000000/m365x68336840.sharepoint.com@d1becd49-3f8d-435f-8618-f112b530e54c')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get App Client Key",
						"description": "App in dif tennat so just for reference\ncannot be enabled for test in this lab",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/SPO-Tenant-AppKey/0e71f6d824944fa3a58ee63b2eeb3b03?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Graph API - list children')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GraphAPI list children works",
						"description": "GET https://graph.microsoft.com/v1.0/drives/{drive-id}/root:/{path-relative-to-root}:/children\n\nhttps://graph.microsoft.com/v1.0/drives/b!gcWE3M-17Ui8fXyY75RS7_dQxDsv5HNJoCVP8FfQZEkVoSmarC4ARKgTnYUZs-p2/root:/Shared%20Documents/MyFiles:/children\n",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://graph.microsoft.com/v1.0/drives/',pipeline().parameters.DriverID,pipeline().parameters.FolderPath,':/children')",
								"type": "Expression"
							},
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": {
									"value": "@pipeline().parameters.TenantID",
									"type": "Expression"
								},
								"username": {
									"value": "@pipeline().parameters.ClientID",
									"type": "Expression"
								},
								"resource": "https://graph.microsoft.com/",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "RosinaAKV",
										"type": "LinkedServiceReference"
									},
									"secretName": "RosinaSPO-ServicePrincipal-Key"
								}
							}
						}
					},
					{
						"name": "Get APP Bearer Token",
						"description": "RosinaAPP",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://login.microsoftonline.com/d1becd49-3f8d-435f-8618-f112b530e54c/oauth2/v2.0/token",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=f43557ff-9a53-430c-8054-700fde9500d8&client_secret=',activity('Get Client Key').output.value,'&scope=https%3A%2F%2Fmanagement.azure.com%2F.default')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Client Key",
						"description": "RosinaSPO-ServicePrincipal-Key",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/RosinaSPO-ServicePrincipal-Key/9effa7ff7c254afbbb1beb5b8d98f10e?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['@odata.context']"
										},
										"sink": {
											"name": "@@odata.context"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['@microsoft.graph.downloadUrl']"
										},
										"sink": {
											"name": "@@microsoft.graph.downloadUrl"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['createdBy']['user']['email']"
										},
										"sink": {
											"name": "value'][0]['createdBy_user_email"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['createdBy']['user']['id']"
										},
										"sink": {
											"name": "value'][0]['createdBy_user_id"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['createdBy']['user']['displayName']"
										},
										"sink": {
											"name": "value'][0]['createdBy_user_displayName"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['createdDateTime']"
										},
										"sink": {
											"name": "value'][0]['createdDateTime"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['eTag']"
										},
										"sink": {
											"name": "eTag"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['id']"
										},
										"sink": {
											"name": "value'][0]['id"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['lastModifiedBy']['user']['email']"
										},
										"sink": {
											"name": "value'][0]['lastModifiedBy_user_email"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['lastModifiedBy']['user']['id']"
										},
										"sink": {
											"name": "value'][0]['lastModifiedBy_user_id"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['lastModifiedBy']['user']['displayName']"
										},
										"sink": {
											"name": "value'][0]['lastModifiedBy_user_displayName"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['lastModifiedDateTime']"
										},
										"sink": {
											"name": "value'][0]['lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['name']"
										},
										"sink": {
											"name": "value'][0]['name"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['parentReference']['driveType']"
										},
										"sink": {
											"name": "driveType"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['parentReference']['driveId']"
										},
										"sink": {
											"name": "driveId"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['parentReference']['id']"
										},
										"sink": {
											"name": "value'][0]['parentReference_id"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['parentReference']['name']"
										},
										"sink": {
											"name": "value'][0]['parentReference_name"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['parentReference']['path']"
										},
										"sink": {
											"name": "path"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['parentReference']['siteId']"
										},
										"sink": {
											"name": "siteId"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['webUrl']"
										},
										"sink": {
											"name": "webUrl"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['cTag']"
										},
										"sink": {
											"name": "cTag"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['file']['hashes']['quickXorHash']"
										},
										"sink": {
											"name": "quickXorHash"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['file']['mimeType']"
										},
										"sink": {
											"name": "mimeType"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['fileSystemInfo']['createdDateTime']"
										},
										"sink": {
											"name": "value'][0]['fileSystemInfo_createdDateTime"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['fileSystemInfo']['lastModifiedDateTime']"
										},
										"sink": {
											"name": "value'][0]['fileSystemInfo_lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['shared']['scope']"
										},
										"sink": {
											"name": "scope"
										}
									},
									{
										"source": {
											"path": "$['value'][0]['size']"
										},
										"sink": {
											"name": "size"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Rest_GraphAPI_My365env",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": {
										"value": "@concat('drives/',pipeline().parameters.DriverID,pipeline().parameters.FolderPath,':/children')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink_graph.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"YourDynamicURL": {
						"type": "string",
						"defaultValue": "https://org1032cddf.crm6.dynamics.com"
					},
					"TenantID": {
						"type": "string",
						"defaultValue": "d1becd49-3f8d-435f-8618-f112b530e54c"
					},
					"ClientID": {
						"type": "string",
						"defaultValue": "f43557ff-9a53-430c-8054-700fde9500d8"
					},
					"ClientKeyAkvUrl": {
						"type": "string",
						"defaultValue": "https://rosina-akv.vault.azure.net/secrets/RosinaSPO-ServicePrincipal-Key/9effa7ff7c254afbbb1beb5b8d98f10e"
					},
					"DriverID": {
						"type": "string",
						"defaultValue": "b!gcWE3M-17Ui8fXyY75RS7_dQxDsv5HNJoCVP8FfQZEkVoSmarC4ARKgTnYUZs-p2"
					},
					"FolderPath": {
						"type": "string",
						"defaultValue": "/root:/MyFiles"
					}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Rest_GraphAPI_My365env')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Graph API')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get APP Bearer Token",
						"description": "RosinaAPP",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://login.microsoftonline.com/16b3c013-d300-468d-ac64-7eda0820b6d3/oauth2/v2.0/token",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=6a26d4de-e457-44fa-b5cf-04a81934fa8d&client_secret=',activity('Get Client Key').output.value,'&scope=https%3A%2F%2Fmanagement.azure.com%2F.default')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Client Key",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/RosinaAppKey/27dabd3fb095403dbf524816451d4185?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "GraphAPI_call",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get APP Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ',activity('Get APP Bearer Token').output.access_token)",
									"type": "Expression"
								}
							},
							"url": "https://graph.microsoft.com/v1.0/users?$select=displayName,givenName,surname,mail,userPrincipalName,jobTitle,department"
						}
					},
					{
						"name": "Copy Graph M365 User data with pagination",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$['@odata.nextlink']"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Rest_GraphAPI_My365env",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": "data"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Rest_GraphAPI_My365env')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HDI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Hive1",
						"type": "HDInsightHive",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"scriptPath": "codes/hello_world_with_param.hql",
							"getDebugInfo": "None",
							"scriptLinkedService": {
								"referenceName": "ADLS_HDInsightclusterStorage",
								"type": "LinkedServiceReference"
							}
						},
						"linkedServiceName": {
							"referenceName": "RosinaHDIcluster",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_HDInsightclusterStorage')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaHDIcluster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Logic App Web and Webhook')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebHook1",
						"type": "WebHook",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://rosinalogicapp.azurewebsites.net:443/api/rosinaLogicApp/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=<sig>",
							"method": "POST",
							"headers": {},
							"body": {
								"name": "Rosina"
							},
							"timeout": "00:10:00",
							"reportStatusOnCallBack": true,
							"disableCertValidation": true
						}
					},
					{
						"name": "Get APP Bearer Token",
						"description": "RosinaAPP",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"disableCertValidation": true,
							"url": "https://login.microsoftonline.com/16b3c013-d300-468d-ac64-7eda0820b6d3/oauth2/v2.0/token",
							"body": {
								"value": "@concat('grant_type=client_credentials&client_id=6a26d4de-e457-44fa-b5cf-04a81934fa8d&client_secret=',activity('Get Client Key').output.value,'&scope=https%3A%2F%2Fmanagement.azure.com%2F.default')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Client Key",
						"description": "<akv-url>?api-version=7.0",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/RosinaAppKey/8ccfa8ba5ee14a49be086527d1807707?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Trigger Logic App",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosinalogicapp.azurewebsites.net:443/api/rosinaLogicApp-simpleTest/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=<sig>"
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Trigger Logic App",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 15
						}
					},
					{
						"name": "If Result is Failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Logic App Result",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Get Logic App Result').output.properties.status,'Succeeded'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Logic App Not Succeeded",
										"errorCode": "na"
									}
								}
							]
						}
					},
					{
						"name": "Get Logic App Result",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get APP Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat('Bearer ',activity('Get APP Bearer Token').output.access_token)",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@concat('https://management.azure.com/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.Web/sites/RosinaLogicApp/hostruntime/runtime/webhooks/workflow/api/management/workflows/rosinaLogicApp-simpleTest/runs/',activity('Trigger Logic App').output.Response,'?api-version=2024-04-01')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Trigger Long Logic App run",
						"description": "HTTP request timeout: 10min\nLogic App side need to add an response task to enable Asynchronous response\n",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosinalogicapp.azurewebsites.net:443/api/rosinaLogicApp/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=<sig>"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OneDriveTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Download URL",
						"description": "URL:\nhttps://graph.microsoft.com/v1.0/users/fbf00b10-47c7-44c2-b308-18170754cea2/drive/root:/Apps/OneDriveTest.xlsx\n\nhttps://graph.microsoft.com/v1.0/users/0e197347-b631-4475-81d8-ed52956c2af7/drive/root:/Apps/Book.xlsx\n\nGet UserID from M365 admin center:\nhttps://entra.microsoft.com/#view/Microsoft_AAD_IAM/TenantOverview.ReactView?Microsoft_AAD_IAM_legacyAADRedirect=true\n\nShow more -> Identity -> Users -> The user -> ObjectID",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://graph.microsoft.com/v1.0/users/fbf00b10-47c7-44c2-b308-18170754cea2/drive/root:/Apps/OneDriveTest.xlsx",
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": "b933704f-3262-4645-b4e0-2b57b2de529c",
								"username": "66572f9a-ba44-48aa-80ff-2c1731be795d",
								"resource": "https://graph.microsoft.com/",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "RosinaAKV",
										"type": "LinkedServiceReference"
									},
									"secretName": "RobertSPOClientKey"
								}
							}
						}
					},
					{
						"name": "GetBearerToken",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get App Client Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://login.microsoftonline.com/b933704f-3262-4645-b4e0-2b57b2de529c/oauth2/v2.0/token",
							"body": {
								"value": "@concat('client_id=66572f9a-ba44-48aa-80ff-2c1731be795d&client_secret=',activity('Get App Client Key').output.value,'&scope=https%3A%2F%2Fgraph.microsoft.com%2F%2F.default&grant_type=client_credentials')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy Binary Excel to ADLS",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "GetBearerToken",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Download URL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "@{concat('Authorization: Bearer ',activity('GetBearerToken').output.access_token)}",
										"type": "Expression"
									}
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "HttpBinaryDataset",
								"type": "DatasetReference",
								"parameters": {
									"downloadUrl": {
										"value": "@activity('Get Download URL').output['@microsoft.graph.downloadUrl']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OracleTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get App Client Key",
						"description": "App in dif tennat so just for reference\ncannot be enabled for test in this lab",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosina-akv.vault.azure.net/secrets/RobertSPOClientKey/dcb2b40d0ce4401f8636aad03187bdfc?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Copy Excel Sheet to Oracle",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Download URL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "GetBearerToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET",
									"additionalHeaders": {
										"value": "@{concat('Authorization: Bearer ',activity('GetBearerToken').output.access_token)}",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OnDriveExcel",
								"type": "DatasetReference",
								"parameters": {
									"DownloadURL": {
										"value": "@activity('Get Download URL').output['@microsoft.graph.downloadUrl']",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OracleTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HttpBinaryDataset')]",
				"[concat(variables('factoryId'), '/datasets/OracleTable')]",
				"[concat(variables('factoryId'), '/datasets/OnDriveExcel')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PowerQuery Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "powerquery_books",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "powerquery_books",
								"type": "DataFlowReference",
								"datasetParameters": {
									"RosinaADLS_gen2_CSV": {},
									"UserQueryADLSSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryADLSSink",
											"dataset": {
												"referenceName": "ADLS_Sink",
												"type": "DatasetReference",
												"parameters": {}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['wrangled_books.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> UserQueryADLSSink"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/powerquery_books')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesforceV2 test CONVERTCURRENCY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data V2 noAlias",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceV2Source",
								"query": "SELECT Id, CONVERTCURRENCY(Amount) FROM Opportunity",
								"includeDeletedObjects": false
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SalesforceObjectTest",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink_Salesforce_V2.csv"
								}
							}
						]
					},
					{
						"name": "Copy data V1 noAlias",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceSource",
								"query": "SELECT Id, CONVERTCURRENCY(Amount) Amount_new FROM Opportunity",
								"readBehavior": "query"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SalesforceObjectTestV1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink_Salesforce_V1.csv"
								}
							}
						]
					},
					{
						"name": "Copy data V2 AliasSame",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceV2Source",
								"query": "SELECT Id, CONVERTCURRENCY(Amount) Amount FROM Opportunity",
								"includeDeletedObjects": false
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SalesforceObjectTest",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink_Salesforce_V2_AliasSame.csv"
								}
							}
						]
					},
					{
						"name": "Copy data V2 AliasDif",
						"description": "SELECT \nId, \nCONVERTCURRENCY(Total_ACV__c), \nCONVERTCURRENCY(Total_ACV__c) Total_ACV__c_new, \nFORMAT(CONVERTCURRENCY(Total_ACV__c)) Formated_Total_ACV__c_new \nFROM Opportunity\nWHERE SystemModstamp > 2025-05-26T07:00:00Z",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceV2Source",
								"query": "SELECT \nId, \nCONVERTCURRENCY(Total_ACV__c), \nCONVERTCURRENCY(Total_ACV__c) columnnew, \nFORMAT(CONVERTCURRENCY(Total_ACV__c)) Formated_Total_ACV__c_new \nFROM Opportunity\nWHERE Total_ACV__c != null",
								"includeDeletedObjects": false
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SalesforceObjectTest",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink_Salesforce_V2_AliasDif.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SalesforceObjectTest')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]",
				"[concat(variables('factoryId'), '/datasets/SalesforceObjectTestV1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesforceV2 test Format')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data V2 noAlias",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data V1 noAlias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceV2Source",
								"query": "SELECT Id, FORMAT(CreatedDate), TimeType__c FROM TimeTest__c",
								"includeDeletedObjects": false
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SalesforceObjectTest",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink_Salesforce_V2.csv"
								}
							}
						]
					},
					{
						"name": "Copy data V1 noAlias",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceSource",
								"query": "SELECT Id, FORMAT(CreatedDate), TimeType__c FROM TimeTest__c",
								"readBehavior": "query"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SalesforceObjectTestV1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink_Salesforce_V1.csv"
								}
							}
						]
					},
					{
						"name": "Copy data V2 AliasSame",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceV2Source",
								"query": "SELECT Id, FORMAT(CreatedDate) CreatedDate, TimeType__c FROM TimeTest__c",
								"includeDeletedObjects": false
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SalesforceObjectTest",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink_Salesforce_V2_AliasSame.csv"
								}
							}
						]
					},
					{
						"name": "Copy data V2 AliasDif",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceV2Source",
								"query": "SELECT \nId, \nFORMAT(CreatedDate) createddate_formated, \nFORMAT(CreatedDate) createddate_formatedA,\nFORMAT(CreatedDate) createddate\nFROM TimeTest__c",
								"includeDeletedObjects": false
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SalesforceObjectTest",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "sink_Salesforce_V2_AliasDif.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SalesforceObjectTest')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]",
				"[concat(variables('factoryId'), '/datasets/SalesforceObjectTestV1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEST Dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Parse_GraphApiResponse",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ManagedVNetIR",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"concurrency": 2,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"aaa": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Parse_GraphApiResponse')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/ManagedVNetIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test Elapsed time metric')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 605
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {
						"duration": "0.00:10:00"
					}
				},
				"folder": {
					"name": "Monitor_Cancel_and_Re-trigger"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Web - File share REST with OAuth2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://login.microsoftonline.com/16b3c013-d300-468d-ac64-7eda0820b6d3/oauth2/token",
							"body": "grant_type=client_credentials&client_id=6a26d4de-e457-44fa-b5cf-04a81934fa8d&client_secret=<???>&resource=\nhttps://storage.azure.com"
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat(activity('Web1').output.token_type,' ',activity('Web1').output.access_token)",
									"type": "Expression"
								},
								"x-ms-version": "2023-08-03",
								"x-ms-file-request-intent": "backup",
								"x-ms-date": {
									"value": "@concat(formatDateTime(utcnow(),'ddd, dd MMM yyyy hh:mm:ss'),' ','GMT')",
									"type": "Expression"
								}
							},
							"url": "https://rosinaauestorage.file.core.windows.net/rosinafs/DATA_01.CSV"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@concat(activity('Web1').output.token_type,' ',activity('Web1').output.access_token)",
										"type": "Expression"
									},
									"x-ms-version": "2023-08-03",
									"x-ms-file-request-intent": "backup",
									"x-ms-date": {
										"value": "@concat(formatDateTime(utcnow(),'ddd, dd MMM yyyy hh:mm:ss'),' ','GMT')",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "REST_AzureFS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "API Tests"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/REST_AzureFS')]",
				"[concat(variables('factoryId'), '/datasets/RosinaADLS_gen2_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/monitor_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check pipeline status",
						"description": "获取当前pipeline_one管道的执行情况",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Wait for pipeline_one SLA",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat(activity('Get Bearer Token').output.token_type,' ',activity('Get Bearer Token').output.access_token)",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@concat('https://management.azure.com/subscriptions/<subid>/resourceGroups/<rgname>/providers/Microsoft.DataFactory/factories/<adfname>/pipelineruns/',pipeline().parameters.pipelineRunID,'?api-version=2018-06-01')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Wait for pipeline_one SLA",
						"description": "等待一段时间，即等待您期望的pipeline_one管道SLA时长",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					},
					{
						"name": "If pipeline succeeded",
						"description": "当pipeline_one返回的状态不是“Succeeded“时，做一系列操作",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set pipeline_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(contains(variables('Pipeline_Status'),'Succeeded'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Cancel current pipeline_one",
									"description": "用REST请求根据run ID参数cancel掉当前pipeline_one的run",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {
											"Authorization": {
												"value": "@concat(activity('Get Bearer Token').output.token_type,' ',activity('Get Bearer Token').output.access_token)",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat('https://management.azure.com/subscriptions/<subid>/resourceGroups/<rgname>/providers/Microsoft.DataFactory/factories/<adfname>/pipelineruns/',pipeline().parameters.pipelineRunID,'/cancel?api-version=2018-06-01')",
											"type": "Expression"
										},
										"body": "{\n'':''\n}"
									}
								},
								{
									"name": "Wait for TTL",
									"description": "等待一定时间（例如等待IR TTL过去，以确保使用新的IR node）",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "Cancel current pipeline_one",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 60
									}
								},
								{
									"name": "Trigger new pipeline_one",
									"description": "使用一个REST请求启动新的pipeline_one管道",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait for TTL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {
											"Authorization": {
												"value": "@concat(activity('Get Bearer Token').output.token_type,' ',activity('Get Bearer Token').output.access_token)",
												"type": "Expression"
											}
										},
										"url": "https://management.azure.com/subscriptions/<subid>/resourceGroups/<rgname>/providers/Microsoft.DataFactory/factories/<adfname>/pipelines/pipeline_one/createRun?api-version=2018-06-01",
										"body": "{\n'':''\n}"
									}
								}
							]
						}
					},
					{
						"name": "Set pipeline_status",
						"description": "记录pipeline_one管道的执行情况",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Check pipeline status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Pipeline_Status",
							"value": {
								"value": "@activity('Check pipeline status').output.status",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Bearer Token",
						"description": "https://learn.microsoft.com/en-us/community/content/azure-rest-api-how-to-create-a-bearer-token#get-the-azure-active-directory-token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://login.microsoftonline.com/<tenantID>/oauth2/token",
							"body": "grant_type=client_credentials&client_id=<>&client_secret=<>&resource=\nhttps://management.azure.com"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pipelineRunID": {
						"type": "string"
					}
				},
				"variables": {
					"Pipeline_Status": {
						"type": "String",
						"defaultValue": "Failed"
					}
				},
				"folder": {
					"name": "Monitor_Cancel_and_Re-trigger"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline-functionapp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "{\n    \"name\": \"pipeline1\",\n    \"properties\": {\n        \"activities\": [\n            {\n                \"name\": \"Web1\",\n                \"type\": \"WebActivity\",\n                \"dependsOn\": [],\n                \"policy\": {\n                    \"timeout\": \"0.12:00:00\",\n                    \"retry\": 0,\n                    \"retryIntervalInSeconds\": 30,\n                    \"secureOutput\": false,\n                    \"secureInput\": false\n                },\n                \"userProperties\": [],\n                \"typeProperties\": {\n                    \"enableTLS13\":true,\n                    \"method\": \"GET\",\n                    \"url\": \"https://rosinafunctionapptest.azurewebsites.net/api/http_trigger1?name=Rosina\",\n                    \"connectVia\": {\n                        \"referenceName\": \"Rosina-SHIR\",\n                        \"type\": \"IntegrationRuntimeReference\"\n                    }\n                }\n            }\n        ],\n        \"annotations\": []\n    }\n}",
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://rosinafunctionapptest.azurewebsites.net/api/http_trigger1?name=Rosina",
							"connectVia": {
								"referenceName": "Rosina-SHIR",
								"type": "IntegrationRuntimeReference"
							},
							"enableTLS13": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_one1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline_one管道的第一个活动开始后（或并行也可以）使用一个Web REST request启动一个monitor_pipeline，并将当前管道的pipeline run ID传递为monitor_pipeline的管道参数。",
				"activities": [
					{
						"name": "pipeline_one first activity",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "pipeline_one other activities",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "pipeline_one first activity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 605
						}
					},
					{
						"name": "Trigger monitor pipeline",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "pipeline_one first activity",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Get Bearer Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Authorization": {
									"value": "@concat(activity('Get Bearer Token').output.token_type,' ',activity('Get Bearer Token').output.access_token)",
									"type": "Expression"
								},
								"Content-Type": "application/json"
							},
							"url": "https://management.azure.com/subscriptions/<subid>/resourceGroups/<rgname>/providers/Microsoft.DataFactory/factories/<adfname>/pipelines/monitor_pipeline/createRun?api-version=2018-06-01",
							"body": {
								"value": "@concat('{\"pipelineRunID\":\"',pipeline().RunId,'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Bearer Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"url": "https://login.microsoftonline.com/<tenantID>/oauth2/token",
							"body": "grant_type=client_credentials&client_id=<>&client_secret=<>&resource=\nhttps://management.azure.com"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {
						"duration": "0.00:10:00"
					}
				},
				"folder": {
					"name": "Monitor_Cancel_and_Re-trigger"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T03:27:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RosinaADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output/CopyWithDeletion",
						"fileSystem": "data"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RosinaADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sink.json",
						"fileSystem": "data"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RosinaADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "output",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_Parquet_V2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": ",\n            \"useParquetV2\": true",
				"linkedServiceName": {
					"referenceName": "RosinaADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "input/ParquetFiles",
						"fileSystem": "data"
					},
					"compressionCodec": "snappy",
					"useParquetV2": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RosinaADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "sink1.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "output",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSFTP_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SFTP_AzBlob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "/output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SFTP_AzBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQL_TestUpsert_SinkTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "TestUpsert_SinkTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQL_TestUpsert_SourceTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "TestUpsert_SourceTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SQL_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQLDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "Sink"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_SFTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sftp_Rosina22env",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "Test.csv",
						"folderPath": "/C:/Test"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sftp_Rosina22env')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobStorage_Parquet_V2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_aue",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "ParquetV2_FutureTime_Varchar50.parquet"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "output",
						"container": "data"
					},
					"compressionCodec": "snappy",
					"useParquetV2": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_aue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_SFTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sftp_Rosina22env",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "Test.csv",
						"folderPath": "/C:/Test"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "A",
						"type": "String"
					},
					{
						"name": "B",
						"type": "String"
					},
					{
						"name": "C",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sftp_Rosina22env')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatabricksDeltaLakeDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDatabricksDeltaLake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"database": "default",
					"table": "parquet_v_2_future_time_varchar_50"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricksDeltaLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataverseEntity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Dataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "cr4fc_myentity1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicsCRM_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DynamicsCRM",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DynamicsCrmEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "cr4fc_myentity_small"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DynamicsCRM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileShare_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzFileShare_MI_Auth",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "DATA_01.CSV"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "DATA_01.CSV"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID | Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzFileShare_MI_Auth')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpBinaryDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnedriveSource",
					"type": "LinkedServiceReference",
					"parameters": {
						"downloadUrl": {
							"value": "@dataset().downloadUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"downloadUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnedriveSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Http_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Http_CostDetails",
					"type": "LinkedServiceReference",
					"parameters": {
						"URL": {
							"value": "@dataset().URL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"URL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Http_CostDetails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_dataverse_CRM_File_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Http_CRM_WebAPI",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Http_CRM_WebAPI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODBC_OracleTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ODBC_Oracle",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"C##AZUREUSER\".\"TIME_TABLE\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ODBC_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnDriveExcel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnedriveSource",
					"type": "LinkedServiceReference",
					"parameters": {
						"downloadUrl": {
							"value": "@dataset().DownloadURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DownloadURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@concat('Sheet1')",
						"type": "Expression"
					},
					"location": {
						"type": "HttpServerLocation"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnedriveSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremMySQLTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremMySQL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string",
						"defaultValue": "`city`"
					}
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnPremMySQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPrem_SQL_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPrem_SQL",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": "10.1.1.5",
						"DBName": "AdventureWorks2019"
					}
				},
				"parameters": {
					"SchemaName": {
						"type": "string",
						"defaultValue": "Production"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "ProductCategory"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnPrem_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/On_PremSQL_ManagedVNetIR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OnPremSQL_ManagedVNetConnector",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "MyTable_CsvSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OnPremSQL_ManagedVNetConnector')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/On_PremSQL_Table_test')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "On_PremSQL_RosinaVM_test",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string",
						"defaultValue": "testFutureTime"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CreatedWhen",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AdmitDtm",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/On_PremSQL_RosinaVM_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RosinaOracleDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "C##AZUREUSER",
					"table": "ONEDRIVE_SINK1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaOracleDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REST_AzureFS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Rest_AzStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "rosinafs/DATA_01.CSV"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Rest_AzStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/REST_AzureFS_112')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Rest_rosina112adlsgen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "rosina112fileshare/Data.json"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Rest_rosina112adlsgen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rest_GraphAPI_ExternalFabric365env')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService_Graph",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService_Graph')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rest_GraphAPI_My365env')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "REST_Graph_My365Tenant",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().relativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/REST_Graph_My365Tenant')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rest_JSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestCostManagement",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestCostManagement')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RosinaADLS_gen2_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RosinaADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output/PartitionOutput",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "bookID",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "authors",
						"type": "String"
					},
					{
						"name": "average_rating",
						"type": "String"
					},
					{
						"name": "isbn",
						"type": "String"
					},
					{
						"name": "isbn13",
						"type": "String"
					},
					{
						"name": "language_code",
						"type": "String"
					},
					{
						"name": "  num_pages",
						"type": "String"
					},
					{
						"name": "ratings_count",
						"type": "String"
					},
					{
						"name": "text_reviews_count",
						"type": "String"
					},
					{
						"name": "publication_date",
						"type": "String"
					},
					{
						"name": "publisher",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SPO_file_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SPO_Http",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "GetFileByServerRelativeUrl('/sites/RosinaSite/Shared%20Documents/MyFiles/DimEmployee.xlsx')/$value"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SPO_Http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSISIR_stagging_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SSISIR_staggingBlob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string",
						"defaultValue": "DATA_01.CSV"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": "stagging"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SSISIR_staggingBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesforceObjectTest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SalesforceLinus",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SalesforceV2Object",
				"schema": [],
				"typeProperties": {
					"objectApiName": "TimeTest__c"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SalesforceLinus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesforceObjectTestV1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SalesforceV1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SalesforceObject",
				"schema": [],
				"typeProperties": {
					"objectApiName": "Opportunity"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SalesforceV1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SharePointOnlineListDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SharePointOnlineList1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SharePointOnlineListResource",
				"schema": [],
				"typeProperties": {
					"listName": "FileList"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SharePointOnlineList1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable_ROSINASNOWFLAKE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake_EN56775",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "CREATEDWHEN",
						"type": "TIMESTAMP_NTZ"
					},
					{
						"name": "ID",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "ADMITDTM",
						"type": "VARCHAR"
					}
				],
				"typeProperties": {
					"schema": "DBO",
					"table": "TESTFUTURETIME2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake_EN56775')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDedicatedSQLTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SynapseDedictedSql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "col1",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SynapseDedictedSql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_HDInsightclusterStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ADLS_HDInsightclusterStorage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SEA-AzureIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SEA-AzureIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzFileShare_MI_Auth')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "&feature.enableAzureFileMIAuth=true",
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzFileShare_MI_Auth_properties_typeProperties_serviceEndpoint')]",
					"fileShare": "rosinafs"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_aue')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('AzureBlobStorage_aue_sasUri')]"
				},
				"connectVia": {
					"referenceName": "ManagedVNetIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ManagedVNetIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.Databricks/workspaces/RosinaADB",
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1291252598671838.18.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.Databricks/workspaces/RosinaADB",
					"existingClusterId": "[parameters('AzureDatabricks_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricksDeltaLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-1291252598671838.18.azuredatabricks.net",
					"clusterId": "0107-023713-cezh7qea",
					"workspaceResourceId": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.Databricks/workspaces/RosinaADB"
				},
				"connectVia": {
					"referenceName": "ManagedVNetIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ManagedVNetIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunction1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunction1_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "FunctionAppKey"
					}
				},
				"connectVia": {
					"referenceName": "RosinaTestSHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/RosinaTestSHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "rosina-azsql/RosinaSampleDB",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSQLDB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "azureuser-psw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlMI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "rosina-sqlmi",
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlMI_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQLMI-azureuser-PSW"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlMI_mymi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "zongmeizhang@microsoft.com\n/subscriptions/57b69ca2-28c0-44e4-a3a9-b8f162590321/resourceGroups/RG-zongmei/providers/Microsoft.Sql/managedInstances/mymi",
				"annotations": [],
				"type": "AzureSqlMI",
				"typeProperties": {
					"server": "[parameters('AzureSqlMI_mymi_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlMI_mymi_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlMI_mymi_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlMI_mymi_password')]"
					}
				},
				"connectVia": {
					"referenceName": "ManagedVNetIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ManagedVNetIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob_RosinaExternalStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "if failed, check storage side -> configuration -> Allow storage account key access",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Blob_RosinaExternalStorage_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ManagedVNetIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ManagedVNetIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dataverse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://admin.powerplatform.microsoft.com/environments/8878b571-6f50-ef11-bfdf-0022489421c1/appusers",
				"annotations": [],
				"type": "CommonDataServiceForApps",
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": "https://org1032cddf.crm6.dynamics.com",
					"authenticationType": "AADServicePrincipal",
					"servicePrincipalId": "[parameters('Dataverse_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "RosinaSPO-ServicePrincipal-Key"
					},
					"servicePrincipalCredentialType": "ServicePrincipalKey"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicsCRM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://admin.powerplatform.microsoft.com/environments/8878b571-6f50-ef11-bfdf-0022489421c1/appusers\nhttps://make.powerapps.com/environments/Default-d1becd49-3f8d-435f-8618-f112b530e54c/entities?tenant=d1becd49-3f8d-435f-8618-f112b530e54c\n\nRosinaSPO_ServicePrincipal  in SPO tennant",
				"annotations": [],
				"type": "DynamicsCrm",
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": "https://org1032cddf.crm6.dynamics.com",
					"authenticationType": "AADServicePrincipal",
					"servicePrincipalId": "[parameters('DynamicsCRM_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "RosinaSPO-ServicePrincipal-Key"
					},
					"servicePrincipalCredentialType": "ServicePrincipalKey"
				},
				"connectVia": {
					"referenceName": "RosinaTestSHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/RosinaTestSHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GitHub1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('GitHub1_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('GitHub1_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQEUxM0E3Q0M4LTNBRkEtNDk2MS1BRjA5LTM5RTcxRkVGMTAzMV9kNzIyZDk2Yy0zM2I3LTRlODQtOTllNS05MTViNjNkZDJlOGEiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hive1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Hive",
				"typeProperties": {
					"host": "[parameters('Hive1_properties_typeProperties_host')]",
					"port": 443,
					"serverType": "HiveServer1",
					"authenticationType": "Anonymous",
					"enableSsl": false,
					"password": false,
					"serviceDiscoveryMode": false,
					"useNativeQuery": false
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Http_CRM_WebAPI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "var ODataRequest = new XMLHttpRequest();\nODataRequest.open(\"POST\", \"https://org913fddd1.crm5.dynamics.com/api/data/v9.2/systemusers\", false);\nODataRequest.setRequestHeader(\"Accept\", \"application/json\");\nODataRequest.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\nODataRequest.setRequestHeader(\"access_token\", \"<>\");\nODataRequest.send(data);",
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Http_CRM_WebAPI_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Http_CostDetails')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"URL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Http_CostDetails_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Http_GraphAPI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "URL IN LS:\nhttps://graph.microsoft.com/v1.0/drives/{drive-id}",
				"parameters": {
					"driverID": {
						"type": "string",
						"defaultValue": "b!gcWE3M-17Ui8fXyY75RS7_dQxDsv5HNJoCVP8FfQZEkVoSmarC4ARKgTnYUZs-p2"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Http_GraphAPI_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODBC_Oracle')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Driver={Microsoft Oracle ODBC Driver_8.0.2.2493};Server=localhost; SID=FREE;\n",
				"annotations": [],
				"type": "Odbc",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('ODBC_Oracle_connectionString')]"
					},
					"authenticationType": "Basic",
					"userName": "[parameters('ODBC_Oracle_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "azureuser-psw"
					}
				},
				"connectVia": {
					"referenceName": "Rosina-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OData1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "OData",
				"typeProperties": {
					"url": "[parameters('OData1_properties_typeProperties_url')]",
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremMySQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "on VM RosinaVM-22env\nlocalhost\ninstance RosinaMySQL80",
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"server": "[parameters('OnPremMySQL_properties_typeProperties_server')]",
					"port": 3306,
					"database": "[parameters('OnPremMySQL_properties_typeProperties_database')]",
					"username": "[parameters('OnPremMySQL_properties_typeProperties_username')]",
					"sslMode": 1,
					"useSystemTrustStore": 0,
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "azureuser-psw"
					},
					"driverVersion": "v2"
				},
				"connectVia": {
					"referenceName": "Rosina-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPremSQL_ManagedVNetConnector')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "in Linux RosinaNATVM (loadbalancer backend VM), need to run console:\nwget https://raw.githubusercontent.com/sajitsasi/az-ip-fwd/main/ip_fwd.sh\nchmod +x ip_fwd.sh\nsudo ./ip_fwd.sh -i eth0 -f 1433 -a rosinavm-test.rosina.com -b 1433\n(or sudo ./ip_fwd.sh -i eth0 -f 1433 -a 10.1.1.7 -b 1433)",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('OnPremSQL_ManagedVNetConnector_properties_typeProperties_server')]",
					"database": "[parameters('OnPremSQL_ManagedVNetConnector_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('OnPremSQL_ManagedVNetConnector_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('OnPremSQL_ManagedVNetConnector_password')]"
					}
				},
				"connectVia": {
					"referenceName": "ManagedVNetIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ManagedVNetIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnPrem_SQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string",
						"defaultValue": "10.1.1.4\\ROSINASQL"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "AdventureWorks2019"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('OnPrem_SQL_properties_typeProperties_server')]",
					"database": "[parameters('OnPrem_SQL_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('OnPrem_SQL_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Rosina_AKV_External",
							"type": "LinkedServiceReference"
						},
						"secretName": "azureuserPSW"
					},
					"connectTimeout": "180"
				},
				"connectVia": {
					"referenceName": "Rosina-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/Rosina_AKV_External')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/On_PremSQL_RosinaVM_test')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('On_PremSQL_RosinaVM_test_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "azureuser-psw"
					}
				},
				"connectVia": {
					"referenceName": "RosinaTestSHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/RosinaTestSHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnedriveSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"downloadUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('OnedriveSource_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/REST_Graph_My365Tenant')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('REST_Graph_My365Tenant_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "AadServicePrincipal",
					"servicePrincipalId": "[parameters('REST_Graph_My365Tenant_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "RosinaSPO-ServicePrincipal-Key"
					},
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"tenant": "[parameters('REST_Graph_My365Tenant_properties_typeProperties_tenant')]",
					"aadResourceId": "[parameters('REST_Graph_My365Tenant_properties_typeProperties_aadResourceId')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestCostManagement')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestCostManagement_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService_Graph')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linus test env 365+Fabirc",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService_Graph_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "AadServicePrincipal",
					"servicePrincipalId": "[parameters('RestService_Graph_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Rosina_AKV_External",
							"type": "LinkedServiceReference"
						},
						"secretName": "FabricTenant-SPN-Key"
					},
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"tenant": "[parameters('RestService_Graph_properties_typeProperties_tenant')]",
					"aadResourceId": "[parameters('RestService_Graph_properties_typeProperties_aadResourceId')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Rosina_AKV_External')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rest_AzStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Rest_AzStorage_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "ManagedServiceIdentity",
					"aadResourceId": "[parameters('Rest_AzStorage_properties_typeProperties_aadResourceId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rest_rosina112adlsgen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Rest_rosina112adlsgen2_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "AadServicePrincipal",
					"servicePrincipalId": "[parameters('Rest_rosina112adlsgen2_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('Rest_rosina112adlsgen2_servicePrincipalKey')]"
					},
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"tenant": "[parameters('Rest_rosina112adlsgen2_properties_typeProperties_tenant')]",
					"aadResourceId": "[parameters('Rest_rosina112adlsgen2_properties_typeProperties_aadResourceId')]"
				},
				"connectVia": {
					"referenceName": "Rosina-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RosinaADLS_gen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('RosinaADLS_gen2_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "ManagedVNetIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ManagedVNetIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RosinaAKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('RosinaAKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RosinaHDIcluster')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HDInsight",
				"typeProperties": {
					"clusterUri": "https://RosinaHDIcluster.azurehdinsight.net",
					"userName": "[parameters('RosinaHDIcluster_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('RosinaHDIcluster_password')]"
					},
					"isEspEnabled": false,
					"linkedServiceName": {
						"referenceName": "ADLS_HDInsightclusterStorage",
						"type": "LinkedServiceReference"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_HDInsightclusterStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RosinaOracleDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('RosinaOracleDB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "azureuser-psw"
					}
				},
				"connectVia": {
					"referenceName": "Rosina-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rosina_AKV_External')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Rosina_AKV_External_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SFTP_AzBlob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('SFTP_AzBlob_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('SFTP_AzBlob_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SFTP_AzBlob_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SPO_Http')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://[site-url]/_api/web/GetFileByServerRelativeUrl('[relative-path-to-file]')/$value",
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('SPO_Http_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSISIR_staggingBlob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('SSISIR_staggingBlob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesforceLinus')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "E9626FEB100D1E6A2DF4A76B3F686624D7694833DCB1A13486B530C71B98FE24",
				"annotations": [],
				"type": "SalesforceV2",
				"typeProperties": {
					"environmentUrl": "[parameters('SalesforceLinus_properties_typeProperties_environmentUrl')]",
					"clientId": "[parameters('SalesforceLinus_properties_typeProperties_clientId')]",
					"clientSecret": {
						"type": "SecureString",
						"value": "[parameters('SalesforceLinus_clientSecret')]"
					},
					"apiVersion": "63.0",
					"authenticationType": "OAuth2ClientCredential"
				},
				"connectVia": {
					"referenceName": "Rosina-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesforceV1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Salesforce",
				"typeProperties": {
					"environmentUrl": "[parameters('SalesforceV1_properties_typeProperties_environmentUrl')]",
					"username": "[parameters('SalesforceV1_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SalesforceV1_password')]"
					},
					"securityToken": {
						"type": "SecureString",
						"value": "[parameters('SalesforceV1_securityToken')]"
					},
					"apiVersion": "54.0"
				},
				"connectVia": {
					"referenceName": "Rosina-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sftp_Rosina22env')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "SFTP server in VM Rosina22env\nneed to enable \"dmgcmd -DisableLocalFolderPathValidation\" for connection",
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('Sftp_Rosina22env_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Sftp_Rosina22env_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Sftp_Rosina22env_password')]"
					}
				},
				"connectVia": {
					"referenceName": "Rosina-SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SharePointOnlineList1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://github.com/Chunlong101/SharePointTips/blob/master/Get%20access%20token%20with%20a%20certificate%20to%20call%20sharepoint%20rest%20api%20and%20graph%20api/README.md",
				"annotations": [],
				"type": "SharePointOnlineList",
				"typeProperties": {
					"siteUrl": "https://m365x68336840.sharepoint.com/sites/RosinaSite",
					"tenantId": "d1becd49-3f8d-435f-8618-f112b530e54c",
					"servicePrincipalId": "[parameters('SharePointOnlineList1_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalCert",
					"servicePrincipalEmbeddedCert": {
						"type": "SecureString",
						"value": "[parameters('SharePointOnlineList1_servicePrincipalEmbeddedCert')]"
					},
					"servicePrincipalEmbeddedCertPassword": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "azureuser-psw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake_EN56775')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "https://qaggkyi-en56775.snowflakecomputing.com\nUsername ROSINAWANG\n",
				"parameters": {
					"JSON": {
						"type": "string",
						"defaultValue": {
							"name": "Snowflake_EN56775",
							"properties": {
								"type": "SnowflakeV2",
								"description": "https://qaggkyi-en56775.snowflakecomputing.com\nUsername ROSINAWANG\n",
								"annotations": [],
								"typeProperties": {
									"authenticationType": "Basic",
									"accountIdentifier": "EN56775",
									"user": "ROSINAWANG",
									"database": "ROSINASNOWFLAKE",
									"warehouse": "ROSINA_WAREHOUSE",
									"host": "qaggkyi-en56775.snowflakecomputing.com",
									"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQEUxM0E3Q0M4LTNBRkEtNDk2MS1BRjA5LTM5RTcxRkVGMTAzMV9jMjM0MTMwYy04MDVmLTRkZGEtYWY2NC0xMDk3YmJmNTY5YjgiDQp9"
								}
							},
							"type": "Microsoft.DataFactory/factories/linkedservices"
						}
					}
				},
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "EN56775",
					"user": "ROSINAWANG",
					"database": "[parameters('Snowflake_EN56775_properties_typeProperties_database')]",
					"warehouse": "ROSINA_WAREHOUSE",
					"host": "[parameters('Snowflake_EN56775_properties_typeProperties_host')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Snowflake_EN56775_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SynapseDedictedSql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('SynapseDedictedSql_properties_typeProperties_server')]",
					"database": "[parameters('SynapseDedictedSql_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SynapseDedictedSql_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SynapseDedictedSql_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/StorageEvent')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/data/blobs/EventTrigger/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('StorageEvent_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1_deleteme')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "TEST Dataflow",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2024-12-04T14:40:00",
						"endTime": "2024-12-06T18:32:00",
						"timeZone": "China Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TEST Dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ManagedVNetIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						},
						"copyComputeScaleProperties": {
							"dataIntegrationUnit": 64,
							"timeToLive": 5
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60,
							"numberOfPipelineNodes": 1,
							"numberOfExternalNodes": 1
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rosina-SHIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RosinaSSISIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Australia East",
						"nodeSize": "Standard_D4_v3",
						"numberOfNodes": 1,
						"maxParallelExecutionsPerNode": 4
					},
					"ssisProperties": {
						"catalogInfo": {
							"catalogServerEndpoint": "[parameters('RosinaSSISIR_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint')]",
							"catalogAdminUserName": "[parameters('RosinaSSISIR_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName')]",
							"catalogAdminPassword": {
								"type": "SecureString",
								"value": "[parameters('RosinaSSISIR_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword')]"
							},
							"catalogPricingTier": null
						},
						"edition": "Standard",
						"licenseType": "BasePrice",
						"dataProxyProperties": {
							"connectVia": {
								"type": "IntegrationRuntimeReference",
								"referenceName": "Rosina-SHIR"
							},
							"stagingLinkedService": {
								"type": "LinkedServiceReference",
								"referenceName": "SSISIR_staggingBlob"
							},
							"path": "stagging"
						}
					},
					"customerVirtualNetwork": {
						"subnetId": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/rosinalabrg/providers/Microsoft.Network/virtualNetworks/RosinaLabRG-VNet/subnets/SSISIR-subnet"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Rosina-SHIR')]",
				"[concat(variables('factoryId'), '/linkedServices/SSISIR_staggingBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RosinaTestSHIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SEA-AzureIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Southeast Asia",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "AzureSQLDB",
								"type": "LinkedServiceReference"
							},
							"name": "SalesOrderDetail"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Table",
								"type": "DatasetReference"
							},
							"name": "SalesOrderHeader",
							"description": "Import data from Azure_SQL_Table"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Table",
								"type": "DatasetReference"
							},
							"name": "Customer"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Table",
								"type": "DatasetReference"
							},
							"name": "Product"
						},
						{
							"dataset": {
								"referenceName": "Azure_SQL_Table",
								"type": "DatasetReference"
							},
							"name": "ProductCategory"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "joinSales"
						},
						{
							"name": "joinCustomer"
						},
						{
							"name": "aggregateByCustomer"
						},
						{
							"name": "sortCustomerValue"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregateSalerTotalSales"
						},
						{
							"name": "join2"
						},
						{
							"name": "joinSalesDetail"
						},
						{
							"name": "join3"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sortProductPerformance"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as short,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'Select * from [SalesLT].[SalesOrderDetail]',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> SalesOrderDetail",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'Select * from [SalesLT].[SalesOrderHeader]',",
						"     format: 'query') ~> SalesOrderHeader",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'Select * from [SalesLT].[Customer]',",
						"     format: 'query') ~> Customer",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'Select * from [SalesLT].[Product]',",
						"     format: 'query') ~> Product",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'Select * from [SalesLT].[ProductCategory]',",
						"     format: 'query') ~> ProductCategory",
						"SalesOrderDetail, SalesOrderHeader join(SalesOrderDetail@SalesOrderID == SalesOrderHeader@SalesOrderID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSales",
						"joinSales, Customer join(SalesOrderHeader@CustomerID == Customer@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCustomer",
						"joinCustomer aggregate(groupBy(Customer@CustomerID),",
						"     TotalSales = sum(LineTotal),",
						"          AverageOrderValue = avg(LineTotal)) ~> aggregateByCustomer",
						"join2 sort(desc(TotalSales, false)) ~> sortCustomerValue",
						"aggregateByCustomer, Customer join(aggregateByCustomer@CustomerID == Customer@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(CustomerFullName = concat(toString(FirstName),'·',toString(LastName))) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          CustomerID = aggregateByCustomer@CustomerID,",
						"          TotalSales,",
						"          AverageOrderValue,",
						"          CustomerID = Customer@CustomerID,",
						"          CompanyName,",
						"          SalesPerson,",
						"          PasswordSalt,",
						"          ModifiedDate,",
						"          CustomerFullName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(SalesPerson),",
						"     SalerTotalSales = sum(TotalSales)) ~> aggregateSalerTotalSales",
						"aggregateSalerTotalSales, select1 join(aggregateSalerTotalSales@SalesPerson == select1@SalesPerson,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"Product, SalesOrderDetail join(Product@ProductID == SalesOrderDetail@ProductID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSalesDetail",
						"joinSalesDetail, ProductCategory join(Product@ProductCategoryID == ProductCategory@ProductCategoryID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 aggregate(groupBy(Product@ProductCategoryID,",
						"          Product@ProductID),",
						"     TotalQuantitySold = sum(OrderQty),",
						"          TotalSales = sum(LineTotal)) ~> aggregate1",
						"aggregate1 sort(desc(TotalQuantitySold, false)) ~> sortProductPerformance",
						"sortCustomerValue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          bookID as string,",
						"          title as string,",
						"          authors as string,",
						"          average_rating as string,",
						"          isbn as string,",
						"          isbn13 as string,",
						"          language_code as string,",
						"          {  num_pages} as string,",
						"          ratings_count as string,",
						"          text_reviews_count as string,",
						"          publication_date as string,",
						"          publisher as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"sortProductPerformance sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          bookID as string,",
						"          title as string,",
						"          authors as string,",
						"          average_rating as string,",
						"          isbn as string,",
						"          isbn13 as string,",
						"          language_code as string,",
						"          {  num_pages} as string,",
						"          ratings_count as string,",
						"          text_reviews_count as string,",
						"          publication_date as string,",
						"          publisher as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDB')]",
				"[concat(variables('factoryId'), '/datasets/Azure_SQL_Table')]",
				"[concat(variables('factoryId'), '/datasets/RosinaADLS_gen2_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_SFTP_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Blob_RosinaExternalStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSFTP_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'data',",
						"     fileName: 'DATA_01.CSV',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['AzureSFTP_sink.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Blob_RosinaExternalStorage')]",
				"[concat(variables('factoryId'), '/datasets/AzureSFTP_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_to_Delta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "On_PremSQL_ManagedVNetIR",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {OPERATION$} as string,",
						"          {CSCN$} as double,",
						"          {COMMIT_TIMESTAMP$} as string,",
						"          {XIDUSN$} as short,",
						"          {XIDSLT$} as short,",
						"          {XIDSEQ$} as integer,",
						"          {DDLDESC$} as string,",
						"          {DDLOPER$} as string,",
						"          {DDLPDOBJN$} as string,",
						"          {RSID$} as integer,",
						"          {TARGET_COLMAP$} as string,",
						"          ADMIN_STATUS_EFF_FROM_EST_FLAG as short,",
						"          ADMIN_STATUS_LASTMODIFIED_DATE as string,",
						"          ENTITY_ADMIN_STATUS_EFF_FRM_DT as string,",
						"          ENTITY_ADMIN_STAT_LSTMODI_DT as string,",
						"          ENTITY_ADMN_STAT_EFFRM_EST_FG as short,",
						"          ORGID as long,",
						"          ORG_ADMIN_REASON_ID as string,",
						"          ORG_ADMIN_STATUS_EFF_FROM_DATE as string,",
						"          ORG_ADMIN_STATUS_ID as boolean,",
						"          ORG_COD_SRC_MD_DATE as string,",
						"          ORG_COI_SRC_MD_DATE as string,",
						"          ORG_COUNTRY_DOMICILE_SRC as string,",
						"          ORG_COUNTRY_DOMICILE_SRC_TYPE as short,",
						"          ORG_COUNTRY_OF_DOMICILE as string,",
						"          ORG_COUNTRY_OF_INCORPORATION as string,",
						"          ORG_COUNTRY_OF_INC_SRC as string,",
						"          ORG_COUNTRY_OF_INC_SRC_TYPE as short,",
						"          ORG_CTRY_DOM_EFF_FROM_DATE as string,",
						"          ORG_CTRY_INC_EFF_FROM_DATE as string,",
						"          ORG_DATA_PROVIDER as short,",
						"          ORG_DATA_PROVIDER_EF_FM_ESTFLG as short,",
						"          ORG_DATA_PROVIDER_EF_FROM_DATE as string,",
						"          ORG_DATA_PROVIDER_LASTMODIDATE as string,",
						"          ORG_DATA_PROVIDER_MD_DATE as string,",
						"          ORG_DEPTH_VALUE as string,",
						"          ORG_DUPLICATE_OF_EFF_FROM_DATE as string,",
						"          ORG_DUPLICATE_OF_ORGID as string,",
						"          ORG_EMAIL_ID as string,",
						"          ORG_EMAIL_ID_SRC as string,",
						"          ORG_EMAIL_ID_SRC_MD_DATE as string,",
						"          ORG_EMAIL_ID_SRC_TYPE as short,",
						"          ORG_ENTITY_ADMIN_REASON_ID as string,",
						"          ORG_ENTITY_ADMIN_STATUS_ID as boolean,",
						"          ORG_FOUNDED_YEAR as string,",
						"          ORG_FOUNDED_YEAR_SRC as string,",
						"          ORG_FOUNDED_YEAR_SRC_MD_DATE as string,",
						"          ORG_FOUNDED_YEAR_SRC_TYPE as short,",
						"          ORG_GEO_LOCATION_LATITUDE as string,",
						"          ORG_GEO_LOCATION_LONGITUDE as string,",
						"          ORG_HAS_ISLAMIC_FINANCE as string,",
						"          ORG_IMMEDIATE_PARENT_ORGID as long,",
						"          ORG_IMMEDIATE_PARENT_SRC as string,",
						"          ORG_IMMEDIATE_PARENT_SRC_TYPE as short,",
						"          ORG_INACTIVE_DATE as string,",
						"          ORG_INACTIVE_DATE_FLAG as short,",
						"          ORG_INACTIVE_DATE_SRC_MD_DATE as string,",
						"          ORG_INACTIVE_EVENT as short,",
						"          ORG_INACTIVE_EVENT_SRC as string,",
						"          ORG_INACTIVE_EVENT_SRC_MD_DATE as string,",
						"          ORG_INACTIVE_EVENT_SRC_TYPE as short,",
						"          ORG_IPO_DATE as string,",
						"          ORG_IP_EFF_FROM_DATE as string,",
						"          ORG_IP_SRC_MD_DATE as string,",
						"          ORG_IS_ACTIVE as boolean,",
						"          ORG_IS_ACTIVE_EFFFROM_EST_FLAG as short,",
						"          ORG_IS_ACTIVE_EFF_FROM_DATE as string,",
						"          ORG_IS_ACTIVE_LASTMODIFIEDDATE as string,",
						"          ORG_IS_EJV_ENTITY as boolean,",
						"          ORG_IS_MANAGED as boolean,",
						"          ORG_IS_MANAGED_EFF_FROM_DATE as string,",
						"          ORG_IS_MANAGED_EF_FROM_ESTFLAG as short,",
						"          ORG_IS_MANAGED_LASTMODIFYDATE as string,",
						"          ORG_IS_PUBLIC as boolean,",
						"          ORG_IS_PUBLIC_EFF_FROM_DATE as string,",
						"          ORG_IS_PUBLIC_EFF_FROM_ESTFLAG as short,",
						"          ORG_IS_PUBLIC_LASTMODIFIEDDATE as string,",
						"          ORG_IS_VERIFIED as boolean,",
						"          ORG_IS_VERIFIED_EFF_FROM_DATE as string,",
						"          ORG_IS_VERIFIED_EF_FROM_ESTFLG as short,",
						"          ORG_IS_VERIFIED_LASTMODIFYDATE as string,",
						"          ORG_JOI_EFF_FROM_DATE as string,",
						"          ORG_JOI_EFF_FROM_EST_FLAG as short,",
						"          ORG_JOI_LAST_MODIFIED_DATE as string,",
						"          ORG_JOI_SRC_MD_DATE as string,",
						"          ORG_JURISDICTION_ID as short,",
						"          ORG_JURISDICTION_SRC as string,",
						"          ORG_JURISDICTION_SRC_TYPE as short,",
						"          ORG_LAST_REVIEWED_BY as integer,",
						"          ORG_LAST_REVIEW_DATE as string,",
						"          ORG_LEGAL_FORM_ID as integer,",
						"          ORG_LEGAL_FORM_SRC as string,",
						"          ORG_LEGAL_FORM_SRC_MD_DATE as string,",
						"          ORG_LEGAL_FORM_SRC_TYPE as string,",
						"          ORG_MODIFIED_DATE as string,",
						"          ORG_NDA_ID as integer,",
						"          ORG_OFFICIAL_ENG_NAME as string,",
						"          ORG_OFFICIAL_ENG_NORM_NAME as string,",
						"          ORG_OFFICIAL_LANG_CULTURE_CD as string,",
						"          ORG_OFFICIAL_NAME as string,",
						"          ORG_OFFICIAL_NAME_LANG_CD as string,",
						"          ORG_OFFICIAL_NAME_LANG_SCR_CD as string,",
						"          ORG_OFFICIAL_NAME_SRC as string,",
						"          ORG_OFFICIAL_NAME_SRC_MD_DATE as string,",
						"          ORG_OFFICIAL_NAME_SRC_TYPE as short,",
						"          ORG_OFFICIAL_NORM_NAME as string,",
						"          ORG_OFFICIAL_TRANS_NAME as string,",
						"          ORG_OFFNAME_EFF_FROM_EST_FLAG as short,",
						"          ORG_OFFNAME_LAST_MODIFIED_DATE as string,",
						"          ORG_OFF_NAME_EFF_DATE_FLAG as short,",
						"          ORG_OFF_NAME_EFF_FROM_DATE as string,",
						"          ORG_REG_AUTHORITY_ORGID as long,",
						"          ORG_REG_AUTHORITY_SRC as string,",
						"          ORG_REG_AUTHORITY_SRC_MD_DATE as string,",
						"          ORG_REG_AUTHORITY_SRC_TYPE as short,",
						"          ORG_REG_NUMBER as string,",
						"          ORG_REG_NUMBER_SRC as string,",
						"          ORG_REG_NUMBER_SRC_TYPE as short,",
						"          ORG_REG_NUM_SRC_MD_DATE as string,",
						"          ORG_SHORT_ENG_NAME as string,",
						"          ORG_SHTNAME_EFF_FROM_EST_FLAG as short,",
						"          ORG_SHTNAME_LAST_MODIFIED_DATE as string,",
						"          ORG_SME_FLAG as string,",
						"          ORG_STATUS_SRC_MD_DATE as string,",
						"          ORG_SUBTYPECD_EFF_FROM_DATE as string,",
						"          ORG_SUBTYPECD_EFF_FROM_ESTFLAG as short,",
						"          ORG_SUBTYPECD_LASTMODIFIEDDATE as string,",
						"          ORG_SUBTYPECODE_SRC_MD_DATE as string,",
						"          ORG_SUBUNIT_NUMBER as integer,",
						"          ORG_SUBUNIT_ORGID as string,",
						"          ORG_SUBUNIT_TYPE_ID as boolean,",
						"          ORG_SUB_TYPE_CD as short,",
						"          ORG_SUB_TYPE_SRC as string,",
						"          ORG_SUB_TYPE_SRC_TYPE as short,",
						"          ORG_TIER_EFF_FROM_DATE as string,",
						"          ORG_TIER_EFF_FROM_EST_FLAG as short,",
						"          ORG_TIER_ID as short,",
						"          ORG_TIER_LAST_MODIFIED_DATE as string,",
						"          ORG_TYPECODE_SRC_MD_DATE as string,",
						"          ORG_TYPE_CD as short,",
						"          ORG_TYPE_CD_EFF_FROM_DATE as string,",
						"          ORG_TYPE_CD_EFF_FROM_EST_FLAG as short,",
						"          ORG_TYPE_CD_LAST_MODIFIED_DATE as string,",
						"          ORG_TYPE_SRC as string,",
						"          ORG_TYPE_SRC_TYPE as short,",
						"          ORG_ULTIMATE_PARENT_ORGID as long,",
						"          ORG_ULTIMATE_PARENT_SRC as string,",
						"          ORG_ULTIMATE_PARENT_SRC_TYPE as short,",
						"          ORG_UP_EFF_FROM_DATE as string,",
						"          ORG_UP_SRC_MD_DATE as string,",
						"          ORG_WEBSITE as string,",
						"          ORG_WEBSITE_LAST_MODIFIED_DATE as string,",
						"          ORG_WEBSITE_SRC as string,",
						"          ORG_WEBSITE_SRC_MD_DATE as string,",
						"          ORG_WEBSITE_SRC_TYPE as short,",
						"          ORG_WORKFLOW_UPDATE_TYPE as short,",
						"          REG_AUTHORITY_EFF_FROM_DATE as string,",
						"          SHORT_ENG_NAME_EFF_DATE_FLAG as short,",
						"          SHORT_ENG_NAME_EFF_FROM_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'data',",
						"     folderPath: 'output/deltaOutput') ~> source2",
						"source1 alterRow(updateIf(OPERATION$==\"I \"||OPERATION$==\"UN\"),",
						"     deleteIf(OPERATION$==\"D \")) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          {OPERATION$} as string,",
						"          {CSCN$} as double,",
						"          {COMMIT_TIMESTAMP$} as string,",
						"          {XIDUSN$} as short,",
						"          {XIDSLT$} as short,",
						"          {XIDSEQ$} as integer,",
						"          {DDLDESC$} as string,",
						"          {DDLOPER$} as string,",
						"          {DDLPDOBJN$} as string,",
						"          {RSID$} as integer,",
						"          {TARGET_COLMAP$} as string,",
						"          ADMIN_STATUS_EFF_FROM_EST_FLAG as short,",
						"          ADMIN_STATUS_LASTMODIFIED_DATE as string,",
						"          ENTITY_ADMIN_STATUS_EFF_FRM_DT as string,",
						"          ENTITY_ADMIN_STAT_LSTMODI_DT as string,",
						"          ENTITY_ADMN_STAT_EFFRM_EST_FG as short,",
						"          ORGID as long,",
						"          ORG_ADMIN_REASON_ID as string,",
						"          ORG_ADMIN_STATUS_EFF_FROM_DATE as string,",
						"          ORG_ADMIN_STATUS_ID as boolean,",
						"          ORG_COD_SRC_MD_DATE as string,",
						"          ORG_COI_SRC_MD_DATE as string,",
						"          ORG_COUNTRY_DOMICILE_SRC as string,",
						"          ORG_COUNTRY_DOMICILE_SRC_TYPE as short,",
						"          ORG_COUNTRY_OF_DOMICILE as string,",
						"          ORG_COUNTRY_OF_INCORPORATION as string,",
						"          ORG_COUNTRY_OF_INC_SRC as string,",
						"          ORG_COUNTRY_OF_INC_SRC_TYPE as short,",
						"          ORG_CTRY_DOM_EFF_FROM_DATE as string,",
						"          ORG_CTRY_INC_EFF_FROM_DATE as string,",
						"          ORG_DATA_PROVIDER as short,",
						"          ORG_DATA_PROVIDER_EF_FM_ESTFLG as short,",
						"          ORG_DATA_PROVIDER_EF_FROM_DATE as string,",
						"          ORG_DATA_PROVIDER_LASTMODIDATE as string,",
						"          ORG_DATA_PROVIDER_MD_DATE as string,",
						"          ORG_DEPTH_VALUE as string,",
						"          ORG_DUPLICATE_OF_EFF_FROM_DATE as string,",
						"          ORG_DUPLICATE_OF_ORGID as string,",
						"          ORG_EMAIL_ID as string,",
						"          ORG_EMAIL_ID_SRC as string,",
						"          ORG_EMAIL_ID_SRC_MD_DATE as string,",
						"          ORG_EMAIL_ID_SRC_TYPE as short,",
						"          ORG_ENTITY_ADMIN_REASON_ID as string,",
						"          ORG_ENTITY_ADMIN_STATUS_ID as boolean,",
						"          ORG_FOUNDED_YEAR as string,",
						"          ORG_FOUNDED_YEAR_SRC as string,",
						"          ORG_FOUNDED_YEAR_SRC_MD_DATE as string,",
						"          ORG_FOUNDED_YEAR_SRC_TYPE as short,",
						"          ORG_GEO_LOCATION_LATITUDE as string,",
						"          ORG_GEO_LOCATION_LONGITUDE as string,",
						"          ORG_HAS_ISLAMIC_FINANCE as string,",
						"          ORG_IMMEDIATE_PARENT_ORGID as long,",
						"          ORG_IMMEDIATE_PARENT_SRC as string,",
						"          ORG_IMMEDIATE_PARENT_SRC_TYPE as short,",
						"          ORG_INACTIVE_DATE as string,",
						"          ORG_INACTIVE_DATE_FLAG as short,",
						"          ORG_INACTIVE_DATE_SRC_MD_DATE as string,",
						"          ORG_INACTIVE_EVENT as short,",
						"          ORG_INACTIVE_EVENT_SRC as string,",
						"          ORG_INACTIVE_EVENT_SRC_MD_DATE as string,",
						"          ORG_INACTIVE_EVENT_SRC_TYPE as short,",
						"          ORG_IPO_DATE as string,",
						"          ORG_IP_EFF_FROM_DATE as string,",
						"          ORG_IP_SRC_MD_DATE as string,",
						"          ORG_IS_ACTIVE as boolean,",
						"          ORG_IS_ACTIVE_EFFFROM_EST_FLAG as short,",
						"          ORG_IS_ACTIVE_EFF_FROM_DATE as string,",
						"          ORG_IS_ACTIVE_LASTMODIFIEDDATE as string,",
						"          ORG_IS_EJV_ENTITY as boolean,",
						"          ORG_IS_MANAGED as boolean,",
						"          ORG_IS_MANAGED_EFF_FROM_DATE as string,",
						"          ORG_IS_MANAGED_EF_FROM_ESTFLAG as short,",
						"          ORG_IS_MANAGED_LASTMODIFYDATE as string,",
						"          ORG_IS_PUBLIC as boolean,",
						"          ORG_IS_PUBLIC_EFF_FROM_DATE as string,",
						"          ORG_IS_PUBLIC_EFF_FROM_ESTFLAG as short,",
						"          ORG_IS_PUBLIC_LASTMODIFIEDDATE as string,",
						"          ORG_IS_VERIFIED as boolean,",
						"          ORG_IS_VERIFIED_EFF_FROM_DATE as string,",
						"          ORG_IS_VERIFIED_EF_FROM_ESTFLG as short,",
						"          ORG_IS_VERIFIED_LASTMODIFYDATE as string,",
						"          ORG_JOI_EFF_FROM_DATE as string,",
						"          ORG_JOI_EFF_FROM_EST_FLAG as short,",
						"          ORG_JOI_LAST_MODIFIED_DATE as string,",
						"          ORG_JOI_SRC_MD_DATE as string,",
						"          ORG_JURISDICTION_ID as short,",
						"          ORG_JURISDICTION_SRC as string,",
						"          ORG_JURISDICTION_SRC_TYPE as short,",
						"          ORG_LAST_REVIEWED_BY as integer,",
						"          ORG_LAST_REVIEW_DATE as string,",
						"          ORG_LEGAL_FORM_ID as integer,",
						"          ORG_LEGAL_FORM_SRC as string,",
						"          ORG_LEGAL_FORM_SRC_MD_DATE as string,",
						"          ORG_LEGAL_FORM_SRC_TYPE as string,",
						"          ORG_MODIFIED_DATE as string,",
						"          ORG_NDA_ID as integer,",
						"          ORG_OFFICIAL_ENG_NAME as string,",
						"          ORG_OFFICIAL_ENG_NORM_NAME as string,",
						"          ORG_OFFICIAL_LANG_CULTURE_CD as string,",
						"          ORG_OFFICIAL_NAME as string,",
						"          ORG_OFFICIAL_NAME_LANG_CD as string,",
						"          ORG_OFFICIAL_NAME_LANG_SCR_CD as string,",
						"          ORG_OFFICIAL_NAME_SRC as string,",
						"          ORG_OFFICIAL_NAME_SRC_MD_DATE as string,",
						"          ORG_OFFICIAL_NAME_SRC_TYPE as short,",
						"          ORG_OFFICIAL_NORM_NAME as string,",
						"          ORG_OFFICIAL_TRANS_NAME as string,",
						"          ORG_OFFNAME_EFF_FROM_EST_FLAG as short,",
						"          ORG_OFFNAME_LAST_MODIFIED_DATE as string,",
						"          ORG_OFF_NAME_EFF_DATE_FLAG as short,",
						"          ORG_OFF_NAME_EFF_FROM_DATE as string,",
						"          ORG_REG_AUTHORITY_ORGID as long,",
						"          ORG_REG_AUTHORITY_SRC as string,",
						"          ORG_REG_AUTHORITY_SRC_MD_DATE as string,",
						"          ORG_REG_AUTHORITY_SRC_TYPE as short,",
						"          ORG_REG_NUMBER as string,",
						"          ORG_REG_NUMBER_SRC as string,",
						"          ORG_REG_NUMBER_SRC_TYPE as short,",
						"          ORG_REG_NUM_SRC_MD_DATE as string,",
						"          ORG_SHORT_ENG_NAME as string,",
						"          ORG_SHTNAME_EFF_FROM_EST_FLAG as short,",
						"          ORG_SHTNAME_LAST_MODIFIED_DATE as string,",
						"          ORG_SME_FLAG as string,",
						"          ORG_STATUS_SRC_MD_DATE as string,",
						"          ORG_SUBTYPECD_EFF_FROM_DATE as string,",
						"          ORG_SUBTYPECD_EFF_FROM_ESTFLAG as short,",
						"          ORG_SUBTYPECD_LASTMODIFIEDDATE as string,",
						"          ORG_SUBTYPECODE_SRC_MD_DATE as string,",
						"          ORG_SUBUNIT_NUMBER as integer,",
						"          ORG_SUBUNIT_ORGID as string,",
						"          ORG_SUBUNIT_TYPE_ID as boolean,",
						"          ORG_SUB_TYPE_CD as short,",
						"          ORG_SUB_TYPE_SRC as string,",
						"          ORG_SUB_TYPE_SRC_TYPE as short,",
						"          ORG_TIER_EFF_FROM_DATE as string,",
						"          ORG_TIER_EFF_FROM_EST_FLAG as short,",
						"          ORG_TIER_ID as short,",
						"          ORG_TIER_LAST_MODIFIED_DATE as string,",
						"          ORG_TYPECODE_SRC_MD_DATE as string,",
						"          ORG_TYPE_CD as short,",
						"          ORG_TYPE_CD_EFF_FROM_DATE as string,",
						"          ORG_TYPE_CD_EFF_FROM_EST_FLAG as short,",
						"          ORG_TYPE_CD_LAST_MODIFIED_DATE as string,",
						"          ORG_TYPE_SRC as string,",
						"          ORG_TYPE_SRC_TYPE as short,",
						"          ORG_ULTIMATE_PARENT_ORGID as long,",
						"          ORG_ULTIMATE_PARENT_SRC as string,",
						"          ORG_ULTIMATE_PARENT_SRC_TYPE as short,",
						"          ORG_UP_EFF_FROM_DATE as string,",
						"          ORG_UP_SRC_MD_DATE as string,",
						"          ORG_WEBSITE as string,",
						"          ORG_WEBSITE_LAST_MODIFIED_DATE as string,",
						"          ORG_WEBSITE_SRC as string,",
						"          ORG_WEBSITE_SRC_MD_DATE as string,",
						"          ORG_WEBSITE_SRC_TYPE as short,",
						"          ORG_WORKFLOW_UPDATE_TYPE as short,",
						"          REG_AUTHORITY_EFF_FROM_DATE as string,",
						"          SHORT_ENG_NAME_EFF_DATE_FLAG as short,",
						"          SHORT_ENG_NAME_EFF_FROM_DATE as string",
						"     ),",
						"     format: 'delta',",
						"     fileSystem: 'data',",
						"     folderPath: 'output/deltaOutput',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: true,",
						"     insertable: true,",
						"     updateable: true,",
						"     upsertable: true,",
						"     keys:['ORGID'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ORGID,",
						"          ORG_DATA_PROVIDER,",
						"          ORG_OFFICIAL_NAME_LANG_SCR_CD,",
						"          ORG_OFFICIAL_NAME_LANG_CD,",
						"          ORG_OFFICIAL_LANG_CULTURE_CD,",
						"          ORG_OFFICIAL_NAME,",
						"          ORG_OFF_NAME_EFF_FROM_DATE,",
						"          ORG_IS_ACTIVE,",
						"          ORG_COUNTRY_OF_DOMICILE,",
						"          ORG_CTRY_DOM_EFF_FROM_DATE,",
						"          ORG_JURISDICTION_ID,",
						"          ORG_IS_MANAGED,",
						"          ORG_IS_VERIFIED,",
						"          ORG_TYPE_CD,",
						"          ORG_SUB_TYPE_CD,",
						"          ORG_COUNTRY_OF_INCORPORATION,",
						"          ORG_CTRY_INC_EFF_FROM_DATE,",
						"          ORG_IS_PUBLIC,",
						"          ORG_WEBSITE,",
						"          ORG_FOUNDED_YEAR,",
						"          ORG_INACTIVE_DATE,",
						"          ORG_INACTIVE_EVENT,",
						"          ORG_REG_AUTHORITY_ORGID,",
						"          REG_AUTHORITY_EFF_FROM_DATE,",
						"          ORG_IPO_DATE,",
						"          ORG_REG_NUMBER,",
						"          ORG_SHORT_ENG_NAME,",
						"          SHORT_ENG_NAME_EFF_FROM_DATE,",
						"          ORG_OFFICIAL_NORM_NAME,",
						"          ORG_OFFICIAL_ENG_NAME,",
						"          ORG_OFFICIAL_ENG_NORM_NAME,",
						"          ORG_OFFICIAL_TRANS_NAME,",
						"          ORG_DUPLICATE_OF_ORGID,",
						"          ORG_DUPLICATE_OF_EFF_FROM_DATE,",
						"          ORG_IP_EFF_FROM_DATE,",
						"          ORG_IMMEDIATE_PARENT_ORGID,",
						"          ORG_ULTIMATE_PARENT_ORGID,",
						"          ORG_UP_EFF_FROM_DATE,",
						"          ORG_NDA_ID,",
						"          ORG_LAST_REVIEW_DATE,",
						"          ORG_LAST_REVIEWED_BY,",
						"          ORG_TYPE_SRC,",
						"          ORG_TYPE_SRC_TYPE,",
						"          ORG_SUB_TYPE_SRC,",
						"          ORG_SUB_TYPE_SRC_TYPE,",
						"          ORG_OFFICIAL_NAME_SRC,",
						"          ORG_OFFICIAL_NAME_SRC_TYPE,",
						"          ORG_COUNTRY_DOMICILE_SRC,",
						"          ORG_COUNTRY_DOMICILE_SRC_TYPE,",
						"          ORG_COUNTRY_OF_INC_SRC,",
						"          ORG_COUNTRY_OF_INC_SRC_TYPE,",
						"          ORG_WEBSITE_SRC,",
						"          ORG_WEBSITE_SRC_TYPE,",
						"          ORG_FOUNDED_YEAR_SRC,",
						"          ORG_FOUNDED_YEAR_SRC_TYPE,",
						"          ORG_INACTIVE_EVENT_SRC,",
						"          ORG_INACTIVE_EVENT_SRC_TYPE,",
						"          ORG_REG_AUTHORITY_SRC,",
						"          ORG_REG_AUTHORITY_SRC_TYPE,",
						"          ORG_REG_NUMBER_SRC,",
						"          ORG_REG_NUMBER_SRC_TYPE,",
						"          ORG_JURISDICTION_SRC,",
						"          ORG_JURISDICTION_SRC_TYPE,",
						"          ORG_IMMEDIATE_PARENT_SRC,",
						"          ORG_IMMEDIATE_PARENT_SRC_TYPE,",
						"          ORG_ULTIMATE_PARENT_SRC,",
						"          ORG_ULTIMATE_PARENT_SRC_TYPE,",
						"          ORG_ADMIN_STATUS_ID,",
						"          ORG_ADMIN_STATUS_EFF_FROM_DATE,",
						"          ORG_ADMIN_REASON_ID,",
						"          ORG_INACTIVE_DATE_FLAG,",
						"          ORG_OFFICIAL_NAME_SRC_MD_DATE,",
						"          ORG_JOI_SRC_MD_DATE,",
						"          ORG_TYPECODE_SRC_MD_DATE,",
						"          ORG_SUBTYPECODE_SRC_MD_DATE,",
						"          ORG_STATUS_SRC_MD_DATE,",
						"          ORG_WEBSITE_SRC_MD_DATE,",
						"          ORG_FOUNDED_YEAR_SRC_MD_DATE,",
						"          ORG_INACTIVE_DATE_SRC_MD_DATE,",
						"          ORG_INACTIVE_EVENT_SRC_MD_DATE,",
						"          ORG_COD_SRC_MD_DATE,",
						"          ORG_COI_SRC_MD_DATE,",
						"          ORG_REG_AUTHORITY_SRC_MD_DATE,",
						"          ORG_REG_NUM_SRC_MD_DATE,",
						"          ORG_IP_SRC_MD_DATE,",
						"          ORG_UP_SRC_MD_DATE,",
						"          ORG_OFF_NAME_EFF_DATE_FLAG,",
						"          SHORT_ENG_NAME_EFF_DATE_FLAG,",
						"          ORG_SUBUNIT_TYPE_ID,",
						"          ORG_SUBUNIT_NUMBER,",
						"          ORG_SUBUNIT_ORGID,",
						"          ORG_DATA_PROVIDER_MD_DATE,",
						"          ORG_IS_EJV_ENTITY,",
						"          ORG_TIER_ID,",
						"          ORG_OFFNAME_LAST_MODIFIED_DATE,",
						"          ORG_OFFNAME_EFF_FROM_EST_FLAG,",
						"          ORG_SHTNAME_LAST_MODIFIED_DATE,",
						"          ORG_SHTNAME_EFF_FROM_EST_FLAG,",
						"          ORG_IS_ACTIVE_EFF_FROM_DATE,",
						"          ORG_IS_ACTIVE_EFFFROM_EST_FLAG,",
						"          ORG_IS_ACTIVE_LASTMODIFIEDDATE,",
						"          ORG_TYPE_CD_EFF_FROM_DATE,",
						"          ORG_TYPE_CD_EFF_FROM_EST_FLAG,",
						"          ORG_TYPE_CD_LAST_MODIFIED_DATE,",
						"          ORG_SUBTYPECD_EFF_FROM_DATE,",
						"          ORG_SUBTYPECD_EFF_FROM_ESTFLAG,",
						"          ORG_SUBTYPECD_LASTMODIFIEDDATE,",
						"          ORG_WEBSITE_LAST_MODIFIED_DATE,",
						"          ORG_IS_MANAGED_EFF_FROM_DATE,",
						"          ORG_IS_MANAGED_EF_FROM_ESTFLAG,",
						"          ORG_IS_MANAGED_LASTMODIFYDATE,",
						"          ORG_IS_VERIFIED_EFF_FROM_DATE,",
						"          ORG_IS_VERIFIED_EF_FROM_ESTFLG,",
						"          ORG_IS_VERIFIED_LASTMODIFYDATE,",
						"          ORG_IS_PUBLIC_EFF_FROM_DATE,",
						"          ORG_IS_PUBLIC_EFF_FROM_ESTFLAG,",
						"          ORG_IS_PUBLIC_LASTMODIFIEDDATE,",
						"          ORG_DATA_PROVIDER_EF_FROM_DATE,",
						"          ORG_DATA_PROVIDER_EF_FM_ESTFLG,",
						"          ORG_DATA_PROVIDER_LASTMODIDATE,",
						"          ORG_TIER_EFF_FROM_DATE,",
						"          ORG_TIER_EFF_FROM_EST_FLAG,",
						"          ORG_TIER_LAST_MODIFIED_DATE,",
						"          ADMIN_STATUS_EFF_FROM_EST_FLAG,",
						"          ADMIN_STATUS_LASTMODIFIED_DATE,",
						"          ORG_JOI_EFF_FROM_DATE,",
						"          ORG_JOI_EFF_FROM_EST_FLAG,",
						"          ORG_JOI_LAST_MODIFIED_DATE,",
						"          ORG_MODIFIED_DATE,",
						"          ORG_SME_FLAG,",
						"          ORG_ENTITY_ADMIN_STATUS_ID,",
						"          ENTITY_ADMIN_STATUS_EFF_FRM_DT,",
						"          ORG_ENTITY_ADMIN_REASON_ID,",
						"          ENTITY_ADMN_STAT_EFFRM_EST_FG,",
						"          ENTITY_ADMIN_STAT_LSTMODI_DT,",
						"          ORG_DEPTH_VALUE,",
						"          ORG_WORKFLOW_UPDATE_TYPE,",
						"          ORG_EMAIL_ID,",
						"          ORG_EMAIL_ID_SRC,",
						"          ORG_EMAIL_ID_SRC_TYPE,",
						"          ORG_EMAIL_ID_SRC_MD_DATE,",
						"          ORG_LEGAL_FORM_ID,",
						"          ORG_LEGAL_FORM_SRC,",
						"          ORG_LEGAL_FORM_SRC_TYPE,",
						"          ORG_LEGAL_FORM_SRC_MD_DATE,",
						"          ORG_GEO_LOCATION_LATITUDE,",
						"          ORG_GEO_LOCATION_LONGITUDE,",
						"          ORG_HAS_ISLAMIC_FINANCE",
						"     )) ~> sink1",
						"source2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RosinaADLS_gen2_CSV')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]",
				"[concat(variables('factoryId'), '/datasets/On_PremSQL_ManagedVNetIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Csv to OnPrem SQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "On_PremSQL_ManagedVNetIR",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Index as short,",
						"          {Organization Id} as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as short,",
						"          Industry as string,",
						"          {Number of employees} as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'HugeDatasets',",
						"     fileName: 'organizations-2000000.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionBy('roundRobin', 100)) ~> source2",
						"source2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]",
				"[concat(variables('factoryId'), '/datasets/On_PremSQL_ManagedVNetIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data Flow Slice_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference"
							},
							"name": "SourceFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "ADLS_Sink",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Index as integer,",
						"          {Organization Id} as string,",
						"          Name as string,",
						"          Website as string,",
						"          Country as string,",
						"          Description as string,",
						"          Founded as integer,",
						"          Industry as string,",
						"          {Number of employees} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceFile",
						"SourceFile split(and(Index>100000,Index<=2000000),",
						"     and(Index>2000000,Index<=3000000),",
						"     disjoint: false) ~> split1@(part1, part2, part0)",
						"split1@part1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['my_file_Index100w-Index200w.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@part2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['my_file_Index200w+.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"split1@part0 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['my_file_Index0-Index100w.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RosinaADLS_gen2_CSV')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parse_GraphApiResponse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "REST_Graph_My365Tenant",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as ({@odata.context} as string, value as ({@microsoft.graph.downloadUrl} as string, cTag as string, createdBy as (user as (displayName as string, email as string, id as string)), createdDateTime as timestamp, eTag as string, file as (hashes as (quickXorHash as string), mimeType as string), fileSystemInfo as (createdDateTime as timestamp, lastModifiedDateTime as timestamp), id as string, lastModifiedBy as (user as (displayName as string, email as string, id as string)), lastModifiedDateTime as timestamp, name as string, parentReference as (driveId as string, driveType as string, id as string, name as string, path as string, siteId as string), shared as (scope as string), size as integer, webUrl as string)[]),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'rest',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     entity: 'drives/b!gcWE3M-17Ui8fXyY75RS7_dQxDsv5HNJoCVP8FfQZEkVoSmarC4ARKgTnYUZs-p2/root:/MyFiles:/children',",
						"     httpMethod: 'GET',",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'documentPerLine']) ~> source1",
						"source1 foldDown(unroll(body.value, body.value),",
						"     mapColumn(",
						"          createdBy = body.value.createdBy,",
						"          createdDateTime = body.value.createdDateTime,",
						"          file = body.value.file,",
						"          id = body.value.id,",
						"          lastModifiedBy = body.value.lastModifiedBy,",
						"          lastModifiedDateTime = body.value.lastModifiedDateTime,",
						"          name = body.value.name,",
						"          parentReference = body.value.parentReference,",
						"          size = body.value.size,",
						"          webUrl = body.value.webUrl",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 select(mapColumn(",
						"          id,",
						"          name,",
						"          path = parentReference.path,",
						"          size,",
						"          createdDateTime,",
						"          lastModifiedDateTime,",
						"          parentReference_driverId = parentReference.driveId,",
						"          parentReference_siteId = parentReference.siteId,",
						"          webUrl",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['sink_Dataflow_GraphAPI_SPOFileMetadata.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/REST_Graph_My365Tenant')]",
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parse_JSON_Dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select2"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          eTag as string,",
						"          id as string,",
						"          location as string,",
						"          name as string,",
						"          properties as (columns as (name as string, type as string)[], nextLink as string, rows as string[][]),",
						"          sku as string,",
						"          type as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'json',",
						"     fileSystem: 'data',",
						"     fileName: 'Billing JSON output.JSON',",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 select(mapColumn(",
						"          rows = properties.rows",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 foldDown(unroll(rows, rows),",
						"     mapColumn(",
						"          rows",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(PreTaxCost = rows[1],",
						"          UsageDate = rows[2],",
						"          Currency = rows[3]) ~> ModifyColumns1",
						"ModifyColumns1 select(mapColumn(",
						"          PreTaxCost,",
						"          UsageDate,",
						"          Currency",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          bookID as string,",
						"          title as string,",
						"          authors as string,",
						"          average_rating as string,",
						"          isbn as string,",
						"          isbn13 as string,",
						"          language_code as string,",
						"          {  num_pages} as string,",
						"          ratings_count as string,",
						"          text_reviews_count as string,",
						"          publication_date as string,",
						"          publisher as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     format: 'table') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]",
				"[concat(variables('factoryId'), '/datasets/RosinaADLS_gen2_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestSQL_Upsert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSQL_TestUpsert_SourceTable",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSQL_TestUpsert_SinkTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          COL_KEY as integer,",
						"          COL_VALUE as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'NONE',",
						"     format: 'table') ~> source1",
						"source1 alterRow(upsertIf(isNull(COL_KEY)==false())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['COL_KEY'],",
						"     skipKeyWrites:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQL_TestUpsert_SourceTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSQL_TestUpsert_SinkTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_Partition')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ADLS_Parquet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'FileName',",
						"     format: 'parquet',",
						"     fileSystem: 'data',",
						"     folderPath: 'output',",
						"     fileName: 'TestPartition.parquet',",
						"     partitionBy('dynamicRange', 12,",
						"          'ID'",
						"     )) ~> source1",
						"source1 derive(FileName = 'ID') ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowUrlColumn:'FileName',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]",
				"[concat(variables('factoryId'), '/datasets/ADLS_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowSplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "sink0"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          NAME as string,",
						"          VALUE as double",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'output',",
						"     fileName: 'sink.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 split(greater(VALUE,10),",
						"     greater(VALUE,3),",
						"     disjoint: true) ~> split1@(Rule1, Rul2, Rul0)",
						"split1@Rule1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['SinkRule1.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@Rul2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['SinkRule2.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"split1@Rul0 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['SinkRule0.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink0"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_testProjectionDatetimeFormat')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "RosinaADLS_gen2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          ID as short,",
						"          ModifiedDatetime as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'',",
						"          Value as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     fileName: 'input.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     dateFormats: ['MM/dd/yyyy','dd/MM/yyyy','yyyy/MM/dd','MM-dd-yyyy','yyyy-MM-dd','dd-MM-yyyy','dd.MM.yyyy','MM.dd.yyyy','yyyy.MM.dd'],",
						"     timestampFormats: ['yyyy-MM-dd','MM/dd/yyyy','dd/MM/yyyy','yyyy/MM/dd','MM/dd/yyyy HH:mm:ss','MM-dd-yyyy','MM/dd/yyyy hh:mm:ss a','dd-MM-yyyy','MM-dd-yyyy HH:mm:ss','MM-dd-yyyy hh:mm:ss a','dd.MM.yyyy','MM.dd.yyyy','yyyy.MM.dd','yyyy.MM.dd HH:mm:ss','yyyy.MM.dd hh:mm:ss a','yyyy-MM-dd\\'T\\'HH:mm:ss','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'']) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {459825} as integer,",
						"          {9E0B6b62Ce31B7c} as string,",
						"          {Holmes-Herman} as string,",
						"          {https://patton-huerta.biz/} as string,",
						"          {Cook Islands} as string,",
						"          {Object-based disintermediate leverage} as string,",
						"          {1999} as short,",
						"          Machinery as string,",
						"          {2167} as short",
						"     ),",
						"     format: 'delimited',",
						"     fileSystem: 'data',",
						"     folderPath: 'output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['sinkDatetime_importedProjection.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery_books')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "RosinaADLS_gen2_CSV",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmultiLineRow: true) ~> RosinaADLS_gen2_CSV",
							"dataset": {
								"referenceName": "RosinaADLS_gen2_CSV",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared RosinaADLS_gen2_CSV = let AdfDoc = AzureStorage.DataLakeContents(\"https://rosinaauestorage.dfs.core.windows.net/data/SampleDatasets/books.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"RosinaADLS_gen2_CSV\",\r\n  #\"Changed column type\" = Table.TransformColumnTypes(Source, {{\"bookID\", Int64.Type}, {\"title\", type text}, {\"authors\", type text}, {\"average_rating\", type text}, {\"isbn\", type text}, {\"isbn13\", type text}, {\"language_code\", type text}, {\"  num_pages\", type text}, {\"ratings_count\", Int64.Type}, {\"text_reviews_count\", Int64.Type}, {\"publication_date\", type text}, {\"publisher\", type text}}),\r\n  #\"Uppercased text\" = Table.TransformColumns(#\"Changed column type\", {{\"language_code\", each Text.Upper(_), type nullable text}}) in #\"Uppercased text\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RosinaADLS_gen2_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/credential1')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.ManagedIdentity/userAssignedIdentities/RosinaUAMI"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/credential2')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/ab07652c-2d4b-4317-a8a7-cfee69ca8c91/resourceGroups/RosinaExternalResources/providers/Microsoft.ManagedIdentity/userAssignedIdentities/RosinaUAMI"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/credential_RosinaApp')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ServicePrincipal",
				"typeProperties": {
					"tenant": "16b3c013-d300-468d-ac64-7eda0820b6d3",
					"servicePrincipalId": "6a26d4de-e457-44fa-b5cf-04a81934fa8d",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "RosinaAKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "RosinaAppKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RosinaAKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureKeyVault_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureKeyVault_properties_groupId')]",
				"fqdns": "[parameters('AzureKeyVault_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureSqlMI_mymi')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureSqlMI_mymi_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureSqlMI_mymi_properties_groupId')]",
				"fqdns": "[parameters('AzureSqlMI_mymi_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/MPE_rosinaexternalstorage')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('MPE_rosinaexternalstorage_properties_privateLinkResourceId')]",
				"groupId": "[parameters('MPE_rosinaexternalstorage_properties_groupId')]",
				"fqdns": "[parameters('MPE_rosinaexternalstorage_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/ManagedPE_ADLSgen2')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('ManagedPE_ADLSgen2_properties_privateLinkResourceId')]",
				"groupId": "[parameters('ManagedPE_ADLSgen2_properties_groupId')]",
				"fqdns": "[parameters('ManagedPE_ADLSgen2_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/PrivateLinkService_OnPremSQL')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('PrivateLinkService_OnPremSQL_properties_privateLinkResourceId')]",
				"groupId": "[parameters('PrivateLinkService_OnPremSQL_properties_groupId')]",
				"fqdns": "[parameters('PrivateLinkService_OnPremSQL_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/rosinaauestorageMPE')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('rosinaauestorageMPE_properties_privateLinkResourceId')]",
				"groupId": "[parameters('rosinaauestorageMPE_properties_groupId')]",
				"fqdns": "[parameters('rosinaauestorageMPE_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/globalparameters",
			"apiVersion": "2018-06-01",
			"properties": {
				"SnowflakeLSJSON": {
					"type": "object",
					"value": "[parameters('default_properties_SnowflakeLSJSON_value')]"
				}
			},
			"dependsOn": []
		}
	]
}